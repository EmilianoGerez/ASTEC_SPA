function ClientCtrl(e,r,t,n){function i(r,t){e.search.query({id:null,number:r,lastName:t},function(e){o.clientList=e})}var a,o=this;o.clientModel={},o.clientSearch={},o.errorInfo={msg:null,data:null},o.successInfo={msg:null,data:null},o.create=function(r){var t=new e.api(o.clientModel);t.$save(function(e){angular.copy(a,o.clientModel),r.$setPristine(),r.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente creado con exito",o.successInfo.data=e},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})},o.search=function(){o.clientSearch.number?(o.searchWord=o.clientSearch.number,i(o.clientSearch.number,"null")):o.clientSearch.lastName&&(o.searchWord=o.clientSearch.lastName,i("null",o.clientSearch.lastName))},o.remove=function(e){var r=t.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");r&&e.$remove()},o.findOne=function(){e.api.get({id:n.id},function(e){o.clientModel=e})},o.update=function(e){o.clientModel.$update(function(r){e.$setPristine(),e.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente editado con exito",o.successInfo.data=r},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})}}function mainCtrl(e,r){var t=this;t.getOrders=function(){var n=e.currentUserData();r.api.query(function(e){t.orders=e.filter(function(e){return e.tech.id==n._id})})}}function OrderCtrl(e,r,t,n,i,a){function o(e,t){r.search.query({id:null,number:e,lastName:t},function(e){s.clientList=e})}function l(r,t){e.search.query({id:null,number:r,lastName:t},function(e){s.orderList=e})}var s=this;s.orderModel={},s.orderSearch={},s.errorInfo={msg:null,data:null},s.successInfo={msg:null,data:null},s.solvedOpt=["No","Si"],s.orderStatus=["Cancelada","Asignada","Completada"],s.selectedTech="",s.create=function(r){s.orderModel.client=s.clientData._id,s.orderModel.tech={id:s.selectedTech._id,firstName:s.selectedTech.firstName,lastName:s.selectedTech.lastName};var t=new e.api(s.orderModel);t.$save(function(e){s.orderModel={},s.clientData=null,s.clientSearch={},s.clientList=null,r.$setPristine(),r.$setUntouched(),s.errorInfo.msg=null,s.successInfo.msg="Orden creada con exito",s.successInfo.data=e},function(e){s.successInfo.msg=null,s.errorInfo.msg=e.data})},s.searchClient=function(){s.clientSearch.number?(s.searchWord=s.clientSearch.number,o(s.clientSearch.number,"null")):s.clientSearch.lastName&&(s.searchWord=s.clientSearch.lastName,o("null",s.clientSearch.lastName))},s.searchOrder=function(){s.orderSearch.number?(s.searchWord=s.orderSearch.number,l(s.orderSearch.number,"null")):s.orderSearch.lastName&&(s.searchWord=s.orderSearch.lastName,l("null",s.orderSearch.lastName))},s.remove=function(e){var r=i.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");r&&e.$remove()},s.findOne=function(r){e.api.get({id:a.id},function(e){s.orderModel=e,r&&(s.selectedTech=s.users.filter(function(e){return e._id===s.orderModel.tech.id}),s.selectedTech=s.selectedTech[0])})},s.update=function(e){s.orderModel.tech={id:s.selectedTech._id,firstName:s.selectedTech.firstName,lastName:s.selectedTech.lastName},s.orderModel.$update(function(r){e.$setPristine(),e.$setUntouched(),s.errorInfo.msg=null,s.successInfo.msg="Orden editada con Ã©xito",s.successInfo.data=r},function(e){s.successInfo.msg=null,s.errorInfo.msg=e.data})},s.getAllUsers=function(){t.api.query(function(e){s.users=e.filter(function(e){return"Tech"===e.role})})}}function dlKeyCode(){return{restrict:"A",link:function(e,r,t){r.bind("keypress",function(r){var n=r.which||r.keyCode;n==t.code&&e.$apply(function(){e.$eval(t.dlKeyCode,{$event:r})})})}}}function UserServ(e,r){this.currentUserData=function(){var t=e.get("jwt");if(t){var n=r.decodeToken(t);return n}return!1}}var appConfiguration=function(){var e="main",r=["ngResource","ui.router","angular-jwt","angular-storage","ngMessages"],t=function(r,t){angular.module(r,t||[]),angular.module(e).requires.push(r)};return{appName:e,appDependencies:r,registerModule:t}}();angular.module(appConfiguration.appName,appConfiguration.appDependencies),appConfiguration.registerModule("client"),appConfiguration.registerModule("order"),appConfiguration.registerModule("user"),angular.module("client").config(["$stateProvider",function(e){e.state("clientPanel",{url:"/clients",templateUrl:"modules/client/views/client-panel.client.view.html"}).state("editClient",{url:"/clients/:id/edit",templateUrl:"modules/client/views/edit-client.client.view.html"}).state("clientDetail",{url:"/clients/:id",templateUrl:"modules/client/views/client-detail.client.view.html",data:{requiresLogin:!0}})}]),angular.module("client").controller("ClientCtrl",["Clients","$http","$window","$stateParams",ClientCtrl]),angular.module("client").factory("Clients",["$resource",function(e){var r=e("api/clients/:id",{id:"@_id"},{update:{method:"PUT"}}),t=e("api/clients/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:r,search:t}}]),angular.module("main").config(["$stateProvider","$locationProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider",function(e,r,t,n,i){t.otherwise("/"),n.tokenGetter=["jwtHelper","$http","store","$state","$rootScope",function(e,r,t,n,i){var a=t.get("jwt");try{return e.isTokenExpired(a)?r({url:"http://localhost:3000/api/users/refresh",skipAuthorization:!0,method:"POST",data:{token:a}}).then(function(e){var r=e.data.token;return t.set("jwt",r),r},function(e){return t.remove("jwt"),n.go("signin"),!1}):a}catch(o){return t.remove("jwt"),!1}}],i.interceptors.push("jwtInterceptor"),e.state("dashboard",{url:"/",templateUrl:"modules/main/views/dashboard.client.view.html"})}]),angular.module("main").directive("ngEnter",function(){return function(e,r,t){r.bind("keydown keypress",function(r){13===r.which&&(e.$apply(function(){e.$eval(t.ngEnter,{event:r})}),r.preventDefault())})}}),angular.module("main").controller("mainCtrl",["UserServ","Orders",mainCtrl]),angular.module("order").config(["$stateProvider",function(e){e.state("orderPanel",{url:"/orders",templateUrl:"modules/order/views/order-panel.client.view.html",data:{requiresLogin:!1}}).state("editorder",{url:"/orders/:id/edit",templateUrl:"modules/order/views/edit-order.client.view.html"}).state("orderDetail",{url:"/orders/:id",templateUrl:"modules/order/views/order-detail.client.view.html"})}]),angular.module("order").controller("OrderCtrl",["Orders","Clients","Users","$http","$window","$stateParams",OrderCtrl]),angular.module("order").directive("dlKeyCode",dlKeyCode),angular.module("order").factory("Orders",["$resource",function(e){var r=e("api/orders/:id",{id:"@_id"},{update:{method:"PUT"}}),t=e("api/orders/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:r,search:t}}]),angular.module("user").config(["$stateProvider",function(e){e.state("signup",{url:"/signup",templateUrl:"modules/user/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/user/views/signin.client.view.html"}).state("secureview",{url:"/secureview",templateUrl:"modules/user/views/secureview.client.view.html",data:{requiresLogin:!0}})}]).run(["$rootScope","$window","store","jwtHelper",function(e,r,t,n){e.$on("$stateChangeStart",function(e,n){n.data&&n.data.requiresLogin&&(t.get("jwt")||(r.location.href="/signin"))})}]),angular.module("user").controller("UserController",["$window","Users","$http","store","jwtHelper","$stateParams",function(e,r,t,n,i,a){var o=this;o.user={},o.errorInfo={},o.signup=function(){var t=new r.api(o.user);t.$save(function(r){n.set("jwt",r.token),e.location.href="/panel"},function(e){o.errorInfo=e})},o.signin=function(){t({url:"http://localhost:3000/api/users/signin",method:"POST",data:o.user}).then(function(r){var t=r.data.token;n.set("jwt",t),e.location.href="/panel"},function(e){o.errorInfo=e.data})},o.getAll=function(){r.api.query(function(e){o.users=e.filter(function(e){return"Tech"===e.role})})},o.getOne=function(){r.api.get({id:a.id},function(e){o.user=e})},o.logout=function(){var e=n.get("jwt"),t=i.decodeToken(e);r.logout.get({id:t._id},function(){n.remove("jwt")})}}]),angular.module("user").directive("compareTo",[function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,r,t,n){n.$validators.compareTo=function(r){return r==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}]),angular.module("user").directive("recordAvailabilityValidator",["$http","Users",function(e,r){return{require:"ngModel",link:function(e,t,n,i){function a(e){i.$setValidity("recordLoading",!e)}function o(e){i.$setValidity("recordAvailable",e)}i.$parsers.push(function(e){if(e&&0!==e.length){a(!0),o(!1);var t=r.search.get({email:e},function(){null===t.data&&(a(!1),o(!0))});return e}})}}}]),angular.module("user").service("UserServ",["store","jwtHelper",UserServ]),angular.module("user").factory("Users",["$resource",function(e){var r=e("api/users/signup/:id",{id:"@_id"}),t=e("api/users/logout/:id",{id:"@_id"}),n=e("api/users/search/:email",{email:"@email"});return{api:r,logout:t,search:n}}]);
//# sourceMappingURL=data:application/json;base64,
