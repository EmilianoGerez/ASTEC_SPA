function ClientCtrl(e,r,t,n){function i(r,t){e.search.query({id:null,number:r,lastName:t},function(e){o.clientList=e})}var a,o=this;o.clientModel={},o.clientSearch={},o.errorInfo={msg:null,data:null},o.successInfo={msg:null,data:null},o.create=function(r){var t=new e.api(o.clientModel);t.$save(function(e){angular.copy(a,o.clientModel),r.$setPristine(),r.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente creado con exito",o.successInfo.data=e},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})},o.search=function(){o.clientSearch.number?(o.searchWord=o.clientSearch.number,i(o.clientSearch.number,"null")):o.clientSearch.lastName&&(o.searchWord=o.clientSearch.lastName,i("null",o.clientSearch.lastName))},o.remove=function(e){var r=t.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");r&&(e.$remove(),o.clientList=o.clientList.filter(function(r){return r._id!==e._id}))},o.findOne=function(){e.api.get({id:n.id},function(e){o.clientModel=e})},o.update=function(e){o.clientModel.$update(function(r){e.$setPristine(),e.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente editado con exito",o.successInfo.data=r},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})}}function mainCtrl(e,r,t,n,i){var a=this;n.$on("$stateChangeStart",function(){switch(t.$$path){case"/dashboard":a.currentSection="Dashboard";break;case"/clients":a.currentSection="Clientes";break;case"/orders":a.currentSection="Ordenes";break;case"/users":a.currentSection="Usuarios"}}),a.getCurrentUser=function(){a.currentUserData=e.getCurrentUserData()}(),a.logout=function(){a.currentUserData={},e.logout()},a.getOrders=function(){var e=a.currentUserData;a.isAdmin="Admin"==e.role,r.api.query(function(r){a.orders=r.filter(function(r){return a.isAdmin?"Asignada"==r.status:"Asignada"==r.status&&r.tech.id==e._id}),a.ordersComplete=r.filter(function(e){return"Completada"==e.status})})},a.remove=function(e){var r=i.confirm("Quieres eliminar la orden N° #"+e.number+" ?");r&&e.$remove(function(){"Asignada"===e.status?a.orders=a.orders.filter(function(r){return r._id!==e._id}):a.ordersComplete=a.ordersComplete.filter(function(r){return r._id!==e._id})})}}function OrderCtrl(e,r,t,n,i,a){function o(e,t){r.search.query({id:null,number:e,lastName:t},function(e){u.clientList=e})}function s(r,t){e.search.query({id:null,number:r,lastName:t},function(e){u.orderList=e})}var u=this;u.orderModel={},u.orderSearch={},u.errorInfo={msg:null,data:null},u.successInfo={msg:null,data:null},u.solvedOpt=["No","Si"],u.orderStatus=["Cancelada","Asignada","Completada"],u.selectedTech="",u.create=function(r){u.orderModel.client=u.clientData._id,u.orderModel.tech={id:u.selectedTech._id,firstName:u.selectedTech.firstName,lastName:u.selectedTech.lastName};var t=new e.api(u.orderModel);t.$save(function(e){u.orderModel={},u.clientData=null,u.clientSearch={},u.clientList=null,r.$setPristine(),r.$setUntouched(),u.errorInfo.msg=null,u.successInfo.msg="Orden creada con exito",u.successInfo.data=e},function(e){u.successInfo.msg=null,u.errorInfo.msg=e.data})},u.searchClient=function(){u.clientSearch.number?(u.searchWord=u.clientSearch.number,o(u.clientSearch.number,"null")):u.clientSearch.lastName&&(u.searchWord=u.clientSearch.lastName,o("null",u.clientSearch.lastName))},u.searchOrder=function(){u.orderSearch.number?(u.searchWord=u.orderSearch.number,s(u.orderSearch.number,"null")):u.orderSearch.lastName&&(u.searchWord=u.orderSearch.lastName,s("null",u.orderSearch.lastName))},u.remove=function(e){var r=i.confirm("Quieres eliminar la orden N° #"+e.number+" ?");r&&(e.$remove(),u.orderList=u.orderList.filter(function(r){return r._id!==e._id}))},u.findOne=function(r){e.api.get({id:a.id},function(e){u.orderModel=e,r&&(u.selectedTech=u.users.filter(function(e){return e._id===u.orderModel.tech.id}),u.selectedTech=u.selectedTech[0])})},u.update=function(e){u.orderModel.tech={id:u.selectedTech._id,firstName:u.selectedTech.firstName,lastName:u.selectedTech.lastName},u.orderModel.$update(function(r){e.$setPristine(),e.$setUntouched(),u.errorInfo.msg=null,u.successInfo.msg="Orden editada con éxito",u.successInfo.data=r},function(e){u.successInfo.msg=null,u.errorInfo.msg=e.data})},u.getAllUsers=function(){t.api.query(function(e){u.users=e.filter(function(e){return"Tech"===e.role})})}}function dlKeyCode(){return{restrict:"A",link:function(e,r,t){r.bind("keypress",function(r){var n=r.which||r.keyCode;n==t.code&&e.$apply(function(){e.$eval(t.dlKeyCode,{$event:r})})})}}}function UserServ(e,r,t,n){this.getCurrentUserData=function(){var t=e.get("jwt");if(t){var n=r.decodeToken(t);return n}return!1},this.isAdmin=function(){var e=this.getCurrentUserData();return"Admin"==e.role},this.logout=function(){var r=this.getCurrentUserData();n.logout.get({id:r._id},function(){e.remove("jwt"),t.location.href="/"})}}var appConfiguration=function(){var e="main",r=["ngResource","ui.router","angular-jwt","angular-storage","ngMessages"],t=function(r,t){angular.module(r,t||[]),angular.module(e).requires.push(r)};return{appName:e,appDependencies:r,registerModule:t}}();angular.module(appConfiguration.appName,appConfiguration.appDependencies),appConfiguration.registerModule("client"),appConfiguration.registerModule("order"),appConfiguration.registerModule("user"),angular.module("client").config(["$stateProvider",function(e){e.state("clientPanel",{url:"/clients",views:{"private":{templateUrl:"modules/client/views/client-panel.client.view.html"}},data:{requiresLogin:!0,requiresAdmin:!0}}).state("editClient",{url:"/clients/:id/edit",views:{"private":{templateUrl:"modules/client/views/edit-client.client.view.html"}},data:{requiresLogin:!0,requiresAdmin:!0}})}]),angular.module("client").controller("ClientCtrl",["Clients","$http","$window","$stateParams",ClientCtrl]),angular.module("client").factory("Clients",["$resource",function(e){var r=e("api/clients/:id",{id:"@_id"},{update:{method:"PUT"}}),t=e("api/clients/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:r,search:t}}]),angular.module("main").config(["$stateProvider","$locationProvider","$urlRouterProvider",function(e,r,t){t.otherwise("/"),e.state("home",{url:"/",views:{"public":{templateUrl:"modules/main/views/home.client.view.html"}},data:{requiresLogin:!1}}).state("dashboard",{url:"/dashboard",views:{"private":{templateUrl:"modules/main/views/dashboard.client.view.html"}},data:{requiresLogin:!0}})}]),angular.module("main").controller("mainCtrl",["UserServ","Orders","$location","$rootScope","$window",mainCtrl]),angular.module("main").directive("ngEnter",function(){return function(e,r,t){r.bind("keydown keypress",function(r){13===r.which&&(e.$apply(function(){e.$eval(t.ngEnter,{event:r})}),r.preventDefault())})}}),angular.module("order").config(["$stateProvider",function(e){e.state("orderPanel",{url:"/orders",views:{"private":{templateUrl:"modules/order/views/order-panel.client.view.html"}},data:{requiresLogin:!0,requiresAdmin:!0}}).state("editorder",{url:"/orders/:id/edit",views:{"private":{templateUrl:"modules/order/views/edit-order.client.view.html"}},data:{requiresLogin:!0}}).state("orderDetail",{url:"/orders/:id",views:{"private":{templateUrl:"modules/order/views/order-detail.client.view.html"}},data:{requiresLogin:!0}})}]),angular.module("order").controller("OrderCtrl",["Orders","Clients","Users","$http","$window","$stateParams",OrderCtrl]),angular.module("order").directive("dlKeyCode",dlKeyCode),angular.module("order").factory("Orders",["$resource",function(e){var r=e("api/orders/:id",{id:"@_id"},{update:{method:"PUT"}}),t=e("api/orders/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:r,search:t}}]),angular.module("user").config(["$stateProvider","jwtInterceptorProvider","$httpProvider",function(e,r,t){e.state("signup",{url:"/signup",views:{"public":{templateUrl:"modules/user/views/signup.client.view.html"}},data:{requiresLogin:!1}}).state("signin",{url:"/signin",views:{"public":{templateUrl:"modules/user/views/signin.client.view.html"}},data:{requiresLogin:!1}}).state("userList",{url:"/users",views:{"private":{templateUrl:"modules/user/views/user-list.client.view.html"}},templateUrl:"modules/user/views/user-list.client.view.html",data:{requiresLogin:!0,requiresAdmin:!0}}).state("editUser",{url:"/users/:id/edit",views:{"private":{templateUrl:"modules/user/views/user-edit.client.view.html"}},data:{requiresLogin:!0,requiresAdmin:!0}}),r.tokenGetter=["jwtHelper","$http","store","$state",function(e,r,t,n){var i=t.get("jwt");try{return e.isTokenExpired(i)?r({url:"http://localhost:3000/api/users/refresh",skipAuthorization:!0,method:"POST",data:{token:i}}).then(function(e){var r=e.data.token;return t.set("jwt",r),r},function(e){return console.log(e),t.remove("jwt"),n.go("signin"),!1}):i}catch(a){return t.remove("jwt"),!1}}],t.interceptors.push("jwtInterceptor")}]).run(["$rootScope","$window","store","$location","UserServ",function(e,r,t,n,i){e.$on("$stateChangeStart",function(e,r){if(r.data&&r.data.requiresLogin){if(!t.get("jwt"))return n.path("/signin");if(r.data.requiresAdmin&&!i.isAdmin())return e.preventDefault(),n.path("/dashboard").replace()}})}]),angular.module("user").controller("UserController",["$window","Users","UserServ","$http","store","jwtHelper","$stateParams","$state",function(e,r,t,n,i,a,o,s){var u=this;u.user={},u.errorInfo={},u.publicSignup=function(){var e=new r.api(u.user);e.$save(function(e){i.set("jwt",e.token),s.go("dashboard")},function(e){u.errorInfo=e.data})},u.signup=function(){u.user.role?(u.user.code="yb9b637i2v",u.user.role="Admin"):(u.user.code="dw77yee18u",u.user.role="Tech");var e=new r.api(u.user);e.$save(function(e){u.users.push(e.data),u.user={}},function(e){u.errorInfo=e.data})},u.signin=function(){var e=new r.signin(u.user);e.$save(function(e){i.set("jwt",e.token),s.go("dashboard")},function(e){u.errorInfo=e.data})},u.getAll=function(){r.api.query(function(e){u.users=e.filter(function(e){return e._id!==u.currentUser._id})})},u.getOne=function(){r.api.get({id:o.id},function(e){u.user=e})},u.getCurrentUser=function(){u.currentUser=t.getCurrentUserData()},u.update=function(){u.user.$update(function(e){s.go("userList")},function(e){u.errorInfo=e.data})},u.remove=function(r){var t=e.confirm("Quieres eliminar el usuario "+r.firstName+" "+r.lastName+" ?");t&&(r.$remove(),u.users=u.users.filter(function(e){return e._id!==r._id}))}}]),angular.module("user").directive("compareTo",[function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,r,t,n){n.$validators.compareTo=function(r){return r==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}]),angular.module("user").directive("recordAvailabilityValidator",["$http","Users",function(e,r){return{require:"ngModel",link:function(e,t,n,i){function a(e){i.$setValidity("recordLoading",!e)}function o(e){i.$setValidity("recordAvailable",e)}i.$parsers.push(function(e){if(e&&0!==e.length){a(!0),o(!1);var t=r.search.get({email:e},function(){null===t.data&&(a(!1),o(!0))});return e}})}}}]),angular.module("user").service("UserServ",["store","jwtHelper","$window","Users",UserServ]),angular.module("user").factory("Users",["$resource",function(e){var r=e("api/users/:id",{id:"@_id"},{update:{method:"PUT"}}),t=e("api/users/signin"),n=e("api/users/logout/:id",{id:"@_id"}),i=e("api/users/search/:email",{email:"@email"});return{api:r,signin:t,logout:n,search:i}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9jb250cm9sbGVycy9jbGllbnQuY2xpZW50LmNvbnRyb2xsZXIuanMiLCJtYWluL2NvbnRyb2xsZXJzL21haW4uY2xpZW50LmNvbnRyb2xsZXIuanMiLCJvcmRlci9jb250cm9sbGVycy9vcmRlci5jbGllbnQuY29udHJvbGxlci5qcyIsIm9yZGVyL2RpcmVjdGl2ZXMvb3JkZXIuZGlyZWN0aXZlcy5qcyIsInVzZXIvc2VydmljZXMvdXNlci1zZXJ2LmNsaWVudC5zZXJ2aWNlLmpzIiwiY29uZmlnLWFwcC5qcyIsIm1haW4tYXBwLmpzIiwiY2xpZW50L2NsaWVudC5jbGllbnQucmVnaXN0ZXIuanMiLCJvcmRlci9vcmRlci5jbGllbnQucmVnaXN0ZXIuanMiLCJ1c2VyL3VzZXIuY2xpZW50LnJlZ2lzdGVyLmpzIiwiY2xpZW50L2NvbmZpZy9jbGllbnQuY2xpZW50LnJvdXRlcy5qcyIsImNsaWVudC9zZXJ2aWNlcy9jbGllbnQuY2xpZW50LnNlcnZpY2UuanMiLCJtYWluL2NvbmZpZy9tYWluLmNsaWVudC5yb3V0ZXMuanMiLCJtYWluL2RpcmVjdGl2ZXMvbmdFbnRlci5kaXJlY3RpdmUuanMiLCJvcmRlci9jb25maWcvb3JkZXIuY2xpZW50LnJvdXRlcy5qcyIsIm9yZGVyL3NlcnZpY2VzL29yZGVyLmNsaWVudC5zZXJ2aWNlLmpzIiwidXNlci9jb25maWcvdXNlci5jbGllbnQucm91dGVzLmpzIiwidXNlci9jb250cm9sbGVycy91c2VyLmNsaWVudC5jb250cm9sbGVyLmpzIiwidXNlci9zZXJ2aWNlcy91c2VyLmNsaWVudC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIkNsaWVudEN0cmwiLCJDbGllbnRzIiwiJGh0dHAiLCIkd2luZG93IiwiJHN0YXRlUGFyYW1zIiwiZ2V0Q2xpZW50IiwibnVtYmVyIiwibGFzdE5hbWUiLCJzZWFyY2giLCJxdWVyeSIsImlkIiwicmVzcG9uc2UiLCJ2bSIsImNsaWVudExpc3QiLCJtYXN0ZXJNb2RlbCIsInRoaXMiLCJjbGllbnRNb2RlbCIsImNsaWVudFNlYXJjaCIsImVycm9ySW5mbyIsIm1zZyIsImRhdGEiLCJzdWNjZXNzSW5mbyIsImNyZWF0ZSIsImZvcm0iLCJuZXdDbGllbnQiLCJhcGkiLCIkc2F2ZSIsInJlcyIsImFuZ3VsYXIiLCJjb3B5IiwiJHNldFByaXN0aW5lIiwiJHNldFVudG91Y2hlZCIsImVyciIsInNlYXJjaFdvcmQiLCJyZW1vdmUiLCJjbGllbnQiLCJjb25maXJtIiwiZmlyc3ROYW1lIiwiJHJlbW92ZSIsImZpbHRlciIsImUiLCJfaWQiLCJmaW5kT25lIiwiZ2V0IiwidXBkYXRlIiwiJHVwZGF0ZSIsIm1haW5DdHJsIiwiVXNlclNlcnYiLCJPcmRlcnMiLCIkbG9jYXRpb24iLCIkcm9vdFNjb3BlIiwiJG9uIiwiJCRwYXRoIiwiY3VycmVudFNlY3Rpb24iLCJnZXRDdXJyZW50VXNlciIsImN1cnJlbnRVc2VyRGF0YSIsImdldEN1cnJlbnRVc2VyRGF0YSIsImxvZ291dCIsImdldE9yZGVycyIsInVzZXIiLCJpc0FkbWluIiwicm9sZSIsIm9yZGVycyIsInN0YXR1cyIsInRlY2giLCJvcmRlcnNDb21wbGV0ZSIsIm9yZGVyIiwiT3JkZXJDdHJsIiwiVXNlcnMiLCJnZXRjbGllbnQiLCJnZXRvcmRlciIsIm9yZGVyTGlzdCIsIm9yZGVyTW9kZWwiLCJvcmRlclNlYXJjaCIsInNvbHZlZE9wdCIsIm9yZGVyU3RhdHVzIiwic2VsZWN0ZWRUZWNoIiwiY2xpZW50RGF0YSIsIm5ld29yZGVyIiwic2VhcmNoQ2xpZW50Iiwic2VhcmNoT3JkZXIiLCJlZGl0IiwidXNlcnMiLCJnZXRBbGxVc2VycyIsImRsS2V5Q29kZSIsInJlc3RyaWN0IiwibGluayIsIiRzY29wZSIsIiRlbGVtZW50IiwiJGF0dHJzIiwiYmluZCIsImV2ZW50Iiwia2V5Q29kZSIsIndoaWNoIiwiY29kZSIsIiRhcHBseSIsIiRldmFsIiwiJGV2ZW50Iiwic3RvcmUiLCJqd3RIZWxwZXIiLCJ0b2tlbiIsInBheWxvYWQiLCJkZWNvZGVUb2tlbiIsImxvY2F0aW9uIiwiaHJlZiIsImFwcENvbmZpZ3VyYXRpb24iLCJhcHBOYW1lIiwiYXBwRGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJNb2R1bGUiLCJtb2R1bGVOYW1lIiwibW9kdWxlRGVwZW5kZW5jaWVzIiwibW9kdWxlIiwicmVxdWlyZXMiLCJwdXNoIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCJzdGF0ZSIsInVybCIsInZpZXdzIiwicHJpdmF0ZSIsInRlbXBsYXRlVXJsIiwicmVxdWlyZXNMb2dpbiIsInJlcXVpcmVzQWRtaW4iLCJjb250cm9sbGVyIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsIm1ldGhvZCIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwicHVibGljIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJuZ0VudGVyIiwicHJldmVudERlZmF1bHQiLCJqd3RJbnRlcmNlcHRvclByb3ZpZGVyIiwiJGh0dHBQcm92aWRlciIsInRva2VuR2V0dGVyIiwiJHN0YXRlIiwiaWRUb2tlbiIsImlzVG9rZW5FeHBpcmVkIiwic2tpcEF1dGhvcml6YXRpb24iLCJ0aGVuIiwiaWRfdG9rZW4iLCJzZXQiLCJjb25zb2xlIiwibG9nIiwiZ28iLCJpbnRlcmNlcHRvcnMiLCJydW4iLCJ0byIsInBhdGgiLCJyZXBsYWNlIiwicHVibGljU2lnbnVwIiwibmV3VXNlciIsInNpZ251cCIsInNpZ25pbiIsImdldEFsbCIsImN1cnJlbnRVc2VyIiwiZ2V0T25lIiwicmVxdWlyZSIsIm90aGVyTW9kZWxWYWx1ZSIsImF0dHJpYnV0ZXMiLCJuZ01vZGVsIiwiJHZhbGlkYXRvcnMiLCJjb21wYXJlVG8iLCJtb2RlbFZhbHVlIiwiJHdhdGNoIiwiJHZhbGlkYXRlIiwic2V0QXNMb2FkaW5nIiwiYm9vbCIsIiRzZXRWYWxpZGl0eSIsInNldEFzQXZhaWxhYmxlIiwiJHBhcnNlcnMiLCJ2YWx1ZSIsImxlbmd0aCIsImVt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QUEiLCJmaWxlIjoiY29tcHJlc3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQ2xpZW50Q3RybChDbGllbnRzLCAkaHR0cCwgJHdpbmRvdywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgdmFyIG1hc3Rlck1vZGVsO1xyXG5cclxuICB2bS5jbGllbnRNb2RlbCA9IHt9O1xyXG4gIHZtLmNsaWVudFNlYXJjaCA9IHt9O1xyXG4gIHZtLmVycm9ySW5mbyA9IHtcclxuICAgIG1zZzogbnVsbCxcclxuICAgIGRhdGE6IG51bGxcclxuICB9O1xyXG4gIHZtLnN1Y2Nlc3NJbmZvID0ge1xyXG4gICAgbXNnOiBudWxsLFxyXG4gICAgZGF0YTogbnVsbFxyXG4gIH07XHJcblxyXG4gIHZtLmNyZWF0ZSA9IGZ1bmN0aW9uKGZvcm0pIHtcclxuICAgIHZhciBuZXdDbGllbnQgPSBuZXcgQ2xpZW50cy5hcGkodm0uY2xpZW50TW9kZWwpO1xyXG5cclxuICAgIG5ld0NsaWVudC4kc2F2ZShmdW5jdGlvbihyZXMpIHtcclxuICAgICAgLy9yZXNldCBmb3JtXHJcbiAgICAgIGFuZ3VsYXIuY29weShtYXN0ZXJNb2RlbCwgdm0uY2xpZW50TW9kZWwpO1xyXG4gICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gJ0NsaWVudGUgY3JlYWRvIGNvbiBleGl0byc7XHJcbiAgICAgIHZtLnN1Y2Nlc3NJbmZvLmRhdGEgPSByZXM7XHJcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5zdWNjZXNzSW5mby5tc2cgPSBudWxsO1xyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gZXJyLmRhdGE7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2bS5zZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICh2bS5jbGllbnRTZWFyY2gubnVtYmVyKSB7XHJcbiAgICAgIHZtLnNlYXJjaFdvcmQgPSB2bS5jbGllbnRTZWFyY2gubnVtYmVyO1xyXG4gICAgICBnZXRDbGllbnQodm0uY2xpZW50U2VhcmNoLm51bWJlciwgJ251bGwnKTtcclxuICAgIH0gZWxzZSBpZiAodm0uY2xpZW50U2VhcmNoLmxhc3ROYW1lKSB7XHJcbiAgICAgIHZtLnNlYXJjaFdvcmQgPSB2bS5jbGllbnRTZWFyY2gubGFzdE5hbWU7XHJcbiAgICAgIGdldENsaWVudCgnbnVsbCcsIHZtLmNsaWVudFNlYXJjaC5sYXN0TmFtZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdm0ucmVtb3ZlID0gZnVuY3Rpb24oY2xpZW50KSB7XHJcbiAgICB2YXIgY29uZmlybSA9ICR3aW5kb3cuY29uZmlybSgnUXVpZXJlcyBlbGltaW5hciBhICcgKyBjbGllbnQuZmlyc3ROYW1lICsgJyAnICsgY2xpZW50Lmxhc3ROYW1lICsgJyA/Jyk7XHJcblxyXG4gICAgaWYgKGNvbmZpcm0pIHtcclxuICAgICAgY2xpZW50LiRyZW1vdmUoKTtcclxuICAgICAgdm0uY2xpZW50TGlzdCA9IHZtLmNsaWVudExpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gZS5faWQgIT09IGNsaWVudC5faWQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZtLmZpbmRPbmUgPSBmdW5jdGlvbigpIHtcclxuICAgIENsaWVudHMuYXBpLmdldCh7XHJcbiAgICAgIGlkOiAkc3RhdGVQYXJhbXMuaWRcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIHZtLmNsaWVudE1vZGVsID0gcmVzcG9uc2U7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2bS51cGRhdGUgPSBmdW5jdGlvbihmb3JtKXtcclxuICAgIHZtLmNsaWVudE1vZGVsLiR1cGRhdGUoZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgIC8vcmVzZXQgZm9ybVxyXG4gICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gJ0NsaWVudGUgZWRpdGFkbyBjb24gZXhpdG8nO1xyXG4gICAgICB2bS5zdWNjZXNzSW5mby5kYXRhID0gcmVzO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgIC8vYWxlcnRcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uZXJyb3JJbmZvLm1zZyA9IGVyci5kYXRhO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gZnVuY3RvbiBoZWxwZXJzIChwcml2YXRlKVxyXG4gIGZ1bmN0aW9uIGdldENsaWVudChudW1iZXIsIGxhc3ROYW1lKSB7XHJcbiAgICBDbGllbnRzLnNlYXJjaC5xdWVyeSh7XHJcbiAgICAgICdpZCc6IG51bGwsXHJcbiAgICAgICdudW1iZXInOiBudW1iZXIsXHJcbiAgICAgICdsYXN0TmFtZSc6IGxhc3ROYW1lXHJcbiAgICB9LCBmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgIHZtLmNsaWVudExpc3QgPSByZXNwb25zZTtcclxuICAgIH0pOyAgXHJcbiAgfVxyXG5cclxufVxyXG5cclxuYW5ndWxhclxyXG4gIC5tb2R1bGUoJ2NsaWVudCcpXHJcbiAgLmNvbnRyb2xsZXIoJ0NsaWVudEN0cmwnLCBbJ0NsaWVudHMnLCAnJGh0dHAnLCAnJHdpbmRvdycsICckc3RhdGVQYXJhbXMnLCBDbGllbnRDdHJsXSk7XHJcbi8vIGFuZ3VsYXIubW9kdWxlKCd1c2VyJylcclxuLy8gICAuZGlyZWN0aXZlKCdyZWNvcmRBdmFpbGFiaWxpdHlWYWxpZGF0b3InLCBbJyRodHRwJywgJ1VzZXJzJywgZnVuY3Rpb24oJGh0dHAsIFVzZXJzKSB7XHJcblxyXG4vLyAgICAgcmV0dXJuIHtcclxuLy8gICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4vLyAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuLy8gICAgICAgICAvL3ZhciBhcGlVcmwgPSBhdHRycy5yZWNvcmRBdmFpbGFiaWxpdHlWYWxpZGF0b3I7XHJcblxyXG4vLyAgICAgICAgIGZ1bmN0aW9uIHNldEFzTG9hZGluZyhib29sKSB7XHJcbi8vICAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncmVjb3JkTG9hZGluZycsICFib29sKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIGZ1bmN0aW9uIHNldEFzQXZhaWxhYmxlKGJvb2wpIHtcclxuLy8gICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdyZWNvcmRBdmFpbGFibGUnLCBib29sKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIG5nTW9kZWwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG4vLyAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbi8vICAgICAgICAgICBzZXRBc0xvYWRpbmcodHJ1ZSk7XHJcbi8vICAgICAgICAgICBzZXRBc0F2YWlsYWJsZShmYWxzZSk7XHJcblxyXG4vLyAgICAgICAgICAgLy8gdXNpbmcgcmVzb3VyY2VcclxuLy8gICAgICAgICAgIHZhciBkYXRhID0gVXNlcnMuc2VhcmNoLmdldCh7XHJcbi8vICAgICAgICAgICAgIG5hbWU6IHZhbHVlXHJcbi8vICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSA9PT0gJycpIHtcclxuLy8gICAgICAgICAgICAgICBzZXRBc0xvYWRpbmcoZmFsc2UpO1xyXG4vLyAgICAgICAgICAgICAgIHNldEFzQXZhaWxhYmxlKHRydWUpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgICAgfVxyXG4vLyAgICAgfTtcclxuLy8gICB9XSk7IiwiZnVuY3Rpb24gbWFpbkN0cmwoVXNlclNlcnYsIE9yZGVycywgJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCAkd2luZG93KSB7XHJcblx0dmFyIHZtID0gdGhpcztcclxuXHJcblx0Ly8gc2V0IHNlY3Rpb24gbmFtZVxyXG5cdCRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0c3dpdGNoICgkbG9jYXRpb24uJCRwYXRoKSB7XHJcblx0XHRcdGNhc2UgJy9kYXNoYm9hcmQnOlxyXG5cdFx0XHRcdHZtLmN1cnJlbnRTZWN0aW9uID0gJ0Rhc2hib2FyZCc7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJy9jbGllbnRzJzpcclxuXHRcdFx0XHR2bS5jdXJyZW50U2VjdGlvbiA9ICdDbGllbnRlcyc7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJy9vcmRlcnMnOlxyXG5cdFx0XHRcdHZtLmN1cnJlbnRTZWN0aW9uID0gJ09yZGVuZXMnO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlICcvdXNlcnMnOlxyXG5cdFx0XHRcdHZtLmN1cnJlbnRTZWN0aW9uID0gJ1VzdWFyaW9zJztcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblxyXG5cdHZtLmdldEN1cnJlbnRVc2VyID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0dm0uY3VycmVudFVzZXJEYXRhID0gVXNlclNlcnYuZ2V0Q3VycmVudFVzZXJEYXRhKCk7XHJcblx0fSkoKTtcclxuXHJcblx0dm0ubG9nb3V0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2bS5jdXJyZW50VXNlckRhdGEgPSB7fTtcclxuXHRcdFVzZXJTZXJ2LmxvZ291dCgpO1xyXG5cdH07XHJcblxyXG5cdHZtLmdldE9yZGVycyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHVzZXIgPSB2bS5jdXJyZW50VXNlckRhdGE7XHJcblx0XHR2bS5pc0FkbWluID0gKHVzZXIucm9sZSA9PSAnQWRtaW4nKSA/IHRydWUgOiBmYWxzZTtcclxuXHJcblx0XHRPcmRlcnMuYXBpLnF1ZXJ5KGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblx0XHRcdHZtLm9yZGVycyA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdGlmICh2bS5pc0FkbWluKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZS5zdGF0dXMgPT0gJ0FzaWduYWRhJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGUuc3RhdHVzID09ICdBc2lnbmFkYScgJiYgZS50ZWNoLmlkID09IHVzZXIuX2lkO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dm0ub3JkZXJzQ29tcGxldGUgPSByZXNwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRyZXR1cm4gZS5zdGF0dXMgPT0gJ0NvbXBsZXRhZGEnO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdHZtLnJlbW92ZSA9IGZ1bmN0aW9uKG9yZGVyKSB7XHJcblx0XHR2YXIgY29uZmlybSA9ICR3aW5kb3cuY29uZmlybSgnUXVpZXJlcyBlbGltaW5hciBsYSBvcmRlbiBOwrAgIycgKyBvcmRlci5udW1iZXIgKyAnID8nKTtcclxuXHRcdGlmIChjb25maXJtKSB7XHJcblx0XHRcdG9yZGVyLiRyZW1vdmUoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGlmKG9yZGVyLnN0YXR1cyA9PT0gJ0FzaWduYWRhJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0ub3JkZXJzID0gdm0ub3JkZXJzLmZpbHRlcihmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLl9pZCAhPT0gb3JkZXIuX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLm9yZGVyc0NvbXBsZXRlID0gdm0ub3JkZXJzQ29tcGxldGUuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuX2lkICE9PSBvcmRlci5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuXHQubW9kdWxlKCdtYWluJylcclxuXHQuY29udHJvbGxlcignbWFpbkN0cmwnLCBbJ1VzZXJTZXJ2JywgJ09yZGVycycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsICckd2luZG93JywgbWFpbkN0cmxdKTsiLCJmdW5jdGlvbiBPcmRlckN0cmwoT3JkZXJzLCBDbGllbnRzLCBVc2VycywgJGh0dHAsICR3aW5kb3csICRzdGF0ZVBhcmFtcykge1xyXG4gIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gIHZtLm9yZGVyTW9kZWwgPSB7fTtcclxuICB2bS5vcmRlclNlYXJjaCA9IHt9O1xyXG4gIHZtLmVycm9ySW5mbyA9IHtcclxuICAgIG1zZzogbnVsbCxcclxuICAgIGRhdGE6IG51bGxcclxuICB9O1xyXG4gIHZtLnN1Y2Nlc3NJbmZvID0ge1xyXG4gICAgbXNnOiBudWxsLFxyXG4gICAgZGF0YTogbnVsbFxyXG4gIH07XHJcbiAgdm0uc29sdmVkT3B0ID0gWydObycsICdTaSddO1xyXG4gIHZtLm9yZGVyU3RhdHVzID0gWydDYW5jZWxhZGEnLCAnQXNpZ25hZGEnLCAnQ29tcGxldGFkYSddO1xyXG4gIHZtLnNlbGVjdGVkVGVjaCA9ICcnO1xyXG5cclxuICB2bS5jcmVhdGUgPSBmdW5jdGlvbihmb3JtKSB7XHJcbiAgICAvLyBhc2luZyBhdHRyXHJcbiAgICB2bS5vcmRlck1vZGVsLmNsaWVudCA9IHZtLmNsaWVudERhdGEuX2lkO1xyXG4gICAgdm0ub3JkZXJNb2RlbC50ZWNoID0ge1xyXG4gICAgICBpZDogdm0uc2VsZWN0ZWRUZWNoLl9pZCxcclxuICAgICAgZmlyc3ROYW1lOiB2bS5zZWxlY3RlZFRlY2guZmlyc3ROYW1lLFxyXG4gICAgICBsYXN0TmFtZTogdm0uc2VsZWN0ZWRUZWNoLmxhc3ROYW1lXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBuZXdvcmRlciA9IG5ldyBPcmRlcnMuYXBpKHZtLm9yZGVyTW9kZWwpO1xyXG5cclxuICAgIG5ld29yZGVyLiRzYXZlKGZ1bmN0aW9uKHJlcykge1xyXG4gICAgICAvL3Jlc2V0IGZvcm1cclxuICAgICAgdm0ub3JkZXJNb2RlbCA9IHt9O1xyXG4gICAgICB2bS5jbGllbnREYXRhID0gbnVsbDtcclxuICAgICAgdm0uY2xpZW50U2VhcmNoID0ge307XHJcbiAgICAgIHZtLmNsaWVudExpc3QgPSBudWxsO1xyXG4gICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gJ09yZGVuIGNyZWFkYSBjb24gZXhpdG8nO1xyXG4gICAgICB2bS5zdWNjZXNzSW5mby5kYXRhID0gcmVzO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgIC8vYWxlcnRcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uZXJyb3JJbmZvLm1zZyA9IGVyci5kYXRhO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdm0uc2VhcmNoQ2xpZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAodm0uY2xpZW50U2VhcmNoLm51bWJlcikge1xyXG4gICAgICB2bS5zZWFyY2hXb3JkID0gdm0uY2xpZW50U2VhcmNoLm51bWJlcjtcclxuICAgICAgZ2V0Y2xpZW50KHZtLmNsaWVudFNlYXJjaC5udW1iZXIsICdudWxsJyk7XHJcbiAgICB9IGVsc2UgaWYgKHZtLmNsaWVudFNlYXJjaC5sYXN0TmFtZSkge1xyXG4gICAgICB2bS5zZWFyY2hXb3JkID0gdm0uY2xpZW50U2VhcmNoLmxhc3ROYW1lO1xyXG4gICAgICBnZXRjbGllbnQoJ251bGwnLCB2bS5jbGllbnRTZWFyY2gubGFzdE5hbWUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZtLnNlYXJjaE9yZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAodm0ub3JkZXJTZWFyY2gubnVtYmVyKSB7XHJcbiAgICAgIHZtLnNlYXJjaFdvcmQgPSB2bS5vcmRlclNlYXJjaC5udW1iZXI7XHJcbiAgICAgIGdldG9yZGVyKHZtLm9yZGVyU2VhcmNoLm51bWJlciwgJ251bGwnKTtcclxuICAgIH0gZWxzZSBpZiAodm0ub3JkZXJTZWFyY2gubGFzdE5hbWUpIHtcclxuICAgICAgdm0uc2VhcmNoV29yZCA9IHZtLm9yZGVyU2VhcmNoLmxhc3ROYW1lO1xyXG4gICAgICBnZXRvcmRlcignbnVsbCcsIHZtLm9yZGVyU2VhcmNoLmxhc3ROYW1lKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2bS5yZW1vdmUgPSBmdW5jdGlvbihvcmRlcikge1xyXG4gICAgdmFyIGNvbmZpcm0gPSAkd2luZG93LmNvbmZpcm0oJ1F1aWVyZXMgZWxpbWluYXIgbGEgb3JkZW4gTsKwICMnICsgb3JkZXIubnVtYmVyICsgJyA/Jyk7XHJcblxyXG4gICAgaWYgKGNvbmZpcm0pIHtcclxuICAgICAgb3JkZXIuJHJlbW92ZSgpO1xyXG4gICAgICB2bS5vcmRlckxpc3QgPSB2bS5vcmRlckxpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gZS5faWQgIT09IG9yZGVyLl9pZDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdm0uZmluZE9uZSA9IGZ1bmN0aW9uKGVkaXQpIHtcclxuICAgIE9yZGVycy5hcGkuZ2V0KHtcclxuICAgICAgaWQ6ICRzdGF0ZVBhcmFtcy5pZFxyXG4gICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgdm0ub3JkZXJNb2RlbCA9IHJlc3BvbnNlO1xyXG4gICAgICAvLyBzZXQgdGVjaCBmb3Igc2VsZWN0IGluIGVkaXQgZm9ybVxyXG4gICAgICBpZiAoZWRpdCkge1xyXG4gICAgICAgIHZtLnNlbGVjdGVkVGVjaCA9IHZtLnVzZXJzLmZpbHRlcihmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICByZXR1cm4gZS5faWQgPT09IHZtLm9yZGVyTW9kZWwudGVjaC5pZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2bS5zZWxlY3RlZFRlY2ggPSB2bS5zZWxlY3RlZFRlY2hbMF07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZtLnVwZGF0ZSA9IGZ1bmN0aW9uKGZvcm0pIHtcclxuICAgIHZtLm9yZGVyTW9kZWwudGVjaCA9IHtcclxuICAgICAgaWQ6IHZtLnNlbGVjdGVkVGVjaC5faWQsXHJcbiAgICAgIGZpcnN0TmFtZTogdm0uc2VsZWN0ZWRUZWNoLmZpcnN0TmFtZSxcclxuICAgICAgbGFzdE5hbWU6IHZtLnNlbGVjdGVkVGVjaC5sYXN0TmFtZVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5vcmRlck1vZGVsLiR1cGRhdGUoZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgIC8vcmVzZXQgZm9ybVxyXG4gICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gJ09yZGVuIGVkaXRhZGEgY29uIMOpeGl0byc7XHJcbiAgICAgIHZtLnN1Y2Nlc3NJbmZvLmRhdGEgPSByZXM7XHJcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5zdWNjZXNzSW5mby5tc2cgPSBudWxsO1xyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gZXJyLmRhdGE7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2bS5nZXRBbGxVc2VycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgVXNlcnMuYXBpLnF1ZXJ5KGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIHZtLnVzZXJzID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gZS5yb2xlID09PSAnVGVjaCc7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gZnVuY3RvbiBoZWxwZXJzIChwcml2YXRlKVxyXG4gIGZ1bmN0aW9uIGdldGNsaWVudChudW1iZXIsIGxhc3ROYW1lKSB7XHJcbiAgICBDbGllbnRzLnNlYXJjaC5xdWVyeSh7XHJcbiAgICAgICdpZCc6IG51bGwsXHJcbiAgICAgICdudW1iZXInOiBudW1iZXIsXHJcbiAgICAgICdsYXN0TmFtZSc6IGxhc3ROYW1lXHJcbiAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICB2bS5jbGllbnRMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldG9yZGVyKG51bWJlciwgbGFzdE5hbWUpIHtcclxuICAgIE9yZGVycy5zZWFyY2gucXVlcnkoe1xyXG4gICAgICAnaWQnOiBudWxsLFxyXG4gICAgICAnbnVtYmVyJzogbnVtYmVyLFxyXG4gICAgICAnbGFzdE5hbWUnOiBsYXN0TmFtZVxyXG4gICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgdm0ub3JkZXJMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuICAubW9kdWxlKCdvcmRlcicpXHJcbiAgLmNvbnRyb2xsZXIoJ09yZGVyQ3RybCcsIFsnT3JkZXJzJywgJ0NsaWVudHMnLCAnVXNlcnMnLCAnJGh0dHAnLCAnJHdpbmRvdycsICckc3RhdGVQYXJhbXMnLCBPcmRlckN0cmxdKTtcclxuLy8gYW5ndWxhci5tb2R1bGUoJ3VzZXInKVxyXG4vLyAgIC5kaXJlY3RpdmUoJ3JlY29yZEF2YWlsYWJpbGl0eVZhbGlkYXRvcicsIFsnJGh0dHAnLCAnVXNlcnMnLCBmdW5jdGlvbigkaHR0cCwgVXNlcnMpIHtcclxuXHJcbi8vICAgICByZXR1cm4ge1xyXG4vLyAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbi8vICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4vLyAgICAgICAgIC8vdmFyIGFwaVVybCA9IGF0dHJzLnJlY29yZEF2YWlsYWJpbGl0eVZhbGlkYXRvcjtcclxuXHJcbi8vICAgICAgICAgZnVuY3Rpb24gc2V0QXNMb2FkaW5nKGJvb2wpIHtcclxuLy8gICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdyZWNvcmRMb2FkaW5nJywgIWJvb2wpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgZnVuY3Rpb24gc2V0QXNBdmFpbGFibGUoYm9vbCkge1xyXG4vLyAgICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlY29yZEF2YWlsYWJsZScsIGJvb2wpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbi8vICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuLy8gICAgICAgICAgIHNldEFzTG9hZGluZyh0cnVlKTtcclxuLy8gICAgICAgICAgIHNldEFzQXZhaWxhYmxlKGZhbHNlKTtcclxuXHJcbi8vICAgICAgICAgICAvLyB1c2luZyByZXNvdXJjZVxyXG4vLyAgICAgICAgICAgdmFyIGRhdGEgPSBVc2Vycy5zZWFyY2guZ2V0KHtcclxuLy8gICAgICAgICAgICAgbmFtZTogdmFsdWVcclxuLy8gICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhID09PSAnJykge1xyXG4vLyAgICAgICAgICAgICAgIHNldEFzTG9hZGluZyhmYWxzZSk7XHJcbi8vICAgICAgICAgICAgICAgc2V0QXNBdmFpbGFibGUodHJ1ZSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4vLyAgICAgICAgIH0pO1xyXG4vLyAgICAgICB9XHJcbi8vICAgICB9O1xyXG4vLyAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZShcIm9yZGVyXCIpLmRpcmVjdGl2ZSgnZGxLZXlDb2RlJywgZGxLZXlDb2RlKTtcclxuXHJcbmZ1bmN0aW9uIGRsS2V5Q29kZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMpIHtcclxuICAgICAgICAgICAgJGVsZW1lbnQuYmluZChcImtleXByZXNzXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT0gJGF0dHJzLmNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGV2YWwoJGF0dHJzLmRsS2V5Q29kZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50OiBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0iLCJmdW5jdGlvbiBVc2VyU2VydihzdG9yZSwgand0SGVscGVyLCAkd2luZG93LCBVc2Vycykge1xyXG5cclxuXHR0aGlzLmdldEN1cnJlbnRVc2VyRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHRva2VuID0gc3RvcmUuZ2V0KCdqd3QnKTtcclxuXHRcdGlmICh0b2tlbikge1xyXG5cdFx0XHR2YXIgcGF5bG9hZCA9IGp3dEhlbHBlci5kZWNvZGVUb2tlbih0b2tlbik7XHJcblx0XHRcdHJldHVybiBwYXlsb2FkO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHRoaXMuaXNBZG1pbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHBheWxvYWQgPSB0aGlzLmdldEN1cnJlbnRVc2VyRGF0YSgpO1xyXG5cdFx0aWYgKHBheWxvYWQucm9sZSA9PSAnQWRtaW4nKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdHRoaXMubG9nb3V0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgcGF5bG9hZCA9IHRoaXMuZ2V0Q3VycmVudFVzZXJEYXRhKCk7XHJcblx0XHRVc2Vycy5sb2dvdXQuZ2V0KHtcclxuXHRcdFx0aWQ6IHBheWxvYWQuX2lkXHJcblx0XHR9LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0c3RvcmUucmVtb3ZlKCdqd3QnKTtcclxuXHRcdFx0JHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nO1xyXG5cdFx0fSk7XHJcblx0fTtcclxufVxyXG5cclxuYW5ndWxhclxyXG5cdC5tb2R1bGUoJ3VzZXInKVxyXG5cdC5zZXJ2aWNlKCdVc2VyU2VydicsIFsnc3RvcmUnLCAnand0SGVscGVyJywgJyR3aW5kb3cnLCAnVXNlcnMnLCBVc2VyU2Vydl0pOyIsInZhciBhcHBDb25maWd1cmF0aW9uID0gKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBhcHBOYW1lID0gJ21haW4nO1xyXG5cdHZhciBhcHBEZXBlbmRlbmNpZXMgPSBbJ25nUmVzb3VyY2UnLCAndWkucm91dGVyJywgJ2FuZ3VsYXItand0JywgJ2FuZ3VsYXItc3RvcmFnZScsICduZ01lc3NhZ2VzJ107XHJcblxyXG5cdC8vTWV0aG9kIGZvciBhZGQgbmV3IG1vZHVsZXNcclxuXHR2YXIgcmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbihtb2R1bGVOYW1lLCBtb2R1bGVEZXBlbmRlbmNpZXMpIHtcclxuXHRcdC8vIENyZWF0ZSBtb2R1bGVcclxuXHRcdGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIG1vZHVsZURlcGVuZGVuY2llcyB8fCBbXSk7XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBuZXcgbW9kdWxlIHRvIHRoZSBhbmd1bGFyIGNvbmZpZyBmaWxlXHJcblx0XHRhbmd1bGFyLm1vZHVsZShhcHBOYW1lKS5yZXF1aXJlcy5wdXNoKG1vZHVsZU5hbWUpO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRhcHBOYW1lOiBhcHBOYW1lLFxyXG5cdFx0YXBwRGVwZW5kZW5jaWVzOiBhcHBEZXBlbmRlbmNpZXMsXHJcblx0XHRyZWdpc3Rlck1vZHVsZTogcmVnaXN0ZXJNb2R1bGVcclxuXHR9XHJcbn0pICgpOyIsIi8vRGVmaW5lIG1haW4gbW9kdWxlXHJcbmFuZ3VsYXIubW9kdWxlKGFwcENvbmZpZ3VyYXRpb24uYXBwTmFtZSwgYXBwQ29uZmlndXJhdGlvbi5hcHBEZXBlbmRlbmNpZXMpOyIsImFwcENvbmZpZ3VyYXRpb24ucmVnaXN0ZXJNb2R1bGUoJ2NsaWVudCcpOyIsImFwcENvbmZpZ3VyYXRpb24ucmVnaXN0ZXJNb2R1bGUoJ29yZGVyJyk7IiwiYXBwQ29uZmlndXJhdGlvbi5yZWdpc3Rlck1vZHVsZSgndXNlcicpOyIsImFuZ3VsYXIubW9kdWxlKCdjbGllbnQnKVxyXG4gIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyKSB7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdjbGllbnRQYW5lbCcsIHtcclxuICAgICAgICB1cmw6ICcvY2xpZW50cycsXHJcbiAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICdwcml2YXRlJzoge1xyXG4gICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvY2xpZW50L3ZpZXdzL2NsaWVudC1wYW5lbC5jbGllbnQudmlldy5odG1sJyxcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIHJlcXVpcmVzTG9naW46IHRydWUsXHJcbiAgICAgICAgICByZXF1aXJlc0FkbWluOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5zdGF0ZSgnZWRpdENsaWVudCcsIHtcclxuICAgICAgICB1cmw6ICcvY2xpZW50cy86aWQvZWRpdCcsXHJcbiAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgJ3ByaXZhdGUnOiB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvY2xpZW50L3ZpZXdzL2VkaXQtY2xpZW50LmNsaWVudC52aWV3Lmh0bWwnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICByZXF1aXJlc0xvZ2luOiB0cnVlLFxyXG4gICAgICAgICAgcmVxdWlyZXNBZG1pbjogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfV0pOyIsIi8vQXJ0aWNsZXMgc2VydmljZSB1c2VkIGZvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIGFydGljbGVzIFJFU1QgZW5kcG9pbnRzXHJcbmFuZ3VsYXIubW9kdWxlKCdjbGllbnQnKS5mYWN0b3J5KCdDbGllbnRzJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbigkcmVzb3VyY2UpIHtcclxuXHJcblx0dmFyIGFwaSA9ICRyZXNvdXJjZSgnYXBpL2NsaWVudHMvOmlkJywge1xyXG5cdFx0aWQ6ICdAX2lkJ1xyXG5cdH0sIHtcclxuXHRcdHVwZGF0ZToge1xyXG5cdFx0XHRtZXRob2Q6ICdQVVQnXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHZhciBzZWFyY2ggPSAkcmVzb3VyY2UoJ2FwaS9jbGllbnRzLzppZC9zZWFyY2gvOm51bWJlci86bGFzdE5hbWUnLCB7XHJcblx0XHRpZDogJ0BfaWQnLFxyXG5cdFx0bnVtYmVyOiAnbnVtYmVyJyxcclxuXHRcdGxhc3ROYW1lOiAnbGFzdE5hbWUnXHJcblx0fSk7XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRhcGk6IGFwaSxcclxuXHRcdHNlYXJjaDogc2VhcmNoXHJcblx0fTtcclxufV0pOyIsImFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21haW4nKVxyXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gUmVkaXJlY3QgdG8gaG9tZSB2aWV3IHdoZW4gcm91dGUgbm90IGZvdW5kXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG5cclxuICAgICAgICAvLyBIb21lIHN0YXRlIHJvdXRpbmdcclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAuc3RhdGUoJ2hvbWUnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3B1YmxpYyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL21haW4vdmlld3MvaG9tZS5jbGllbnQudmlldy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVzTG9naW46IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnZGFzaGJvYXJkJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL2Rhc2hib2FyZCcsXHJcbiAgICAgICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgICAgICdwcml2YXRlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvbWFpbi92aWV3cy9kYXNoYm9hcmQuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlc0xvZ2luOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB1c2UgdGhlIEhUTUw1IEhpc3RvcnkgQVBJXHJcbiAgICAgICAgLy8kbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcblxyXG5cclxuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnbWFpbicpXHJcbiAgICAuZGlyZWN0aXZlKCduZ0VudGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJrZXlkb3duIGtleXByZXNzXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kZXZhbChhdHRycy5uZ0VudGVyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnQnOiBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdvcmRlcicpXHJcbiAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIpIHtcclxuXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAuc3RhdGUoJ29yZGVyUGFuZWwnLCB7XHJcbiAgICAgICAgdXJsOiAnL29yZGVycycsXHJcbiAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICdwcml2YXRlJzoge1xyXG4gICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvb3JkZXIvdmlld3Mvb3JkZXItcGFuZWwuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICByZXF1aXJlc0xvZ2luOiB0cnVlLFxyXG4gICAgICAgICAgcmVxdWlyZXNBZG1pbjogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSkuc3RhdGUoJ2VkaXRvcmRlcicsIHtcclxuICAgICAgICB1cmw6ICcvb3JkZXJzLzppZC9lZGl0JyxcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAncHJpdmF0ZSc6IHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9vcmRlci92aWV3cy9lZGl0LW9yZGVyLmNsaWVudC52aWV3Lmh0bWwnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICByZXF1aXJlc0xvZ2luOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5zdGF0ZSgnb3JkZXJEZXRhaWwnLCB7XHJcbiAgICAgICAgdXJsOiAnL29yZGVycy86aWQnLFxyXG4gICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICdwcml2YXRlJzoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL29yZGVyL3ZpZXdzL29yZGVyLWRldGFpbC5jbGllbnQudmlldy5odG1sJyxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgcmVxdWlyZXNMb2dpbjogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfV0pOyIsIi8vQXJ0aWNsZXMgc2VydmljZSB1c2VkIGZvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIGFydGljbGVzIFJFU1QgZW5kcG9pbnRzXHJcbmFuZ3VsYXIubW9kdWxlKCdvcmRlcicpLmZhY3RvcnkoJ09yZGVycycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24oJHJlc291cmNlKSB7XHJcblxyXG5cdHZhciBhcGkgPSAkcmVzb3VyY2UoJ2FwaS9vcmRlcnMvOmlkJywge1xyXG5cdFx0aWQ6ICdAX2lkJ1xyXG5cdH0sIHtcclxuXHRcdHVwZGF0ZToge1xyXG5cdFx0XHRtZXRob2Q6ICdQVVQnXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHZhciBzZWFyY2ggPSAkcmVzb3VyY2UoJ2FwaS9vcmRlcnMvOmlkL3NlYXJjaC86bnVtYmVyLzpsYXN0TmFtZScsIHtcclxuXHRcdGlkOiAnQF9pZCcsXHJcblx0XHRudW1iZXI6ICdudW1iZXInLFxyXG5cdFx0bGFzdE5hbWU6ICdsYXN0TmFtZSdcclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGFwaTogYXBpLFxyXG5cdFx0c2VhcmNoOiBzZWFyY2hcclxuXHR9O1xyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ3VzZXInKVxyXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJ2p3dEludGVyY2VwdG9yUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlcicsIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgand0SW50ZXJjZXB0b3JQcm92aWRlciwgJGh0dHBQcm92aWRlcikge1xyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAuc3RhdGUoJ3NpZ251cCcsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy9zaWdudXAnLFxyXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAncHVibGljJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdXNlci92aWV3cy9zaWdudXAuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlc0xvZ2luOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5zdGF0ZSgnc2lnbmluJywge1xyXG4gICAgICAgICAgICB1cmw6ICcvc2lnbmluJyxcclxuICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICdwdWJsaWMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3VzZXIvdmlld3Mvc2lnbmluLmNsaWVudC52aWV3Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlc0xvZ2luOiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuc3RhdGUoJ3VzZXJMaXN0Jywge1xyXG4gICAgICAgICAgICB1cmw6ICcvdXNlcnMnLFxyXG4gICAgICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICAgICAgJ3ByaXZhdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3VzZXIvdmlld3MvdXNlci1saXN0LmNsaWVudC52aWV3Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdXNlci92aWV3cy91c2VyLWxpc3QuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVzTG9naW46IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlc0FkbWluOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5zdGF0ZSgnZWRpdFVzZXInLCB7XHJcbiAgICAgICAgICAgIHVybDogJy91c2Vycy86aWQvZWRpdCcsXHJcbiAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAncHJpdmF0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvdXNlci92aWV3cy91c2VyLWVkaXQuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVzTG9naW46IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlc0FkbWluOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8vZ2V0IHRva2VuIHRvIGxvY2FsIHN0b3JhZ2UgYW5kIHNldCBvbiB0aGUgaGVhZGVyc1xyXG4gICAgICAgIGp3dEludGVyY2VwdG9yUHJvdmlkZXIudG9rZW5HZXR0ZXIgPSBbJ2p3dEhlbHBlcicsICckaHR0cCcsICdzdG9yZScsICckc3RhdGUnLCBmdW5jdGlvbiAoand0SGVscGVyLCAkaHR0cCwgc3RvcmUsICRzdGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgaWRUb2tlbiA9IHN0b3JlLmdldCgnand0Jyk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoand0SGVscGVyLmlzVG9rZW5FeHBpcmVkKGlkVG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHByb21pc2Ugb2YgYSBKV1QgaWRfdG9rZW5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3VzZXJzL3JlZnJlc2gnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG1ha2VzIGl0IHNvIHRoYXQgdGhpcyByZXF1ZXN0IGRvZXNuJ3Qgc2VuZCB0aGUgSldUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBBdXRob3JpemF0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGlkVG9rZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZF90b2tlbiA9IHJlc3BvbnNlLmRhdGEudG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlLnNldCgnand0JywgaWRfdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRfdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yZS5yZW1vdmUoJ2p3dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3NpZ25pbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZFRva2VuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHN0b3JlLnJlbW92ZSgnand0Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XTtcclxuICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdqd3RJbnRlcmNlcHRvcicpO1xyXG5cclxuXHJcbiAgICB9XSlcclxuICAgIC5ydW4oWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnc3RvcmUnLCAnJGxvY2F0aW9uJywgJ1VzZXJTZXJ2JywgZnVuY3Rpb24gKCRyb290U2NvcGUsICR3aW5kb3csIHN0b3JlLCAkbG9jYXRpb24sIFVzZXJTZXJ2KSB7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKGUsIHRvKSB7XHJcbiAgICAgICAgICAgIGlmICh0by5kYXRhICYmIHRvLmRhdGEucmVxdWlyZXNMb2dpbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdG9yZS5nZXQoJ2p3dCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCcvc2lnbmluJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvLmRhdGEucmVxdWlyZXNBZG1pbiAmJiAhVXNlclNlcnYuaXNBZG1pbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkbG9jYXRpb24ucGF0aCgnL2Rhc2hib2FyZCcpLnJlcGxhY2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgndXNlcicpXHJcbiAgLmNvbnRyb2xsZXIoJ1VzZXJDb250cm9sbGVyJywgWyckd2luZG93JywgJ1VzZXJzJywgJ1VzZXJTZXJ2JywgJyRodHRwJywgJ3N0b3JlJywgJ2p3dEhlbHBlcicsICckc3RhdGVQYXJhbXMnLCAnJHN0YXRlJywgZnVuY3Rpb24oJHdpbmRvdywgVXNlcnMsIFVzZXJTZXJ2LCAkaHR0cCwgc3RvcmUsIGp3dEhlbHBlciwgJHN0YXRlUGFyYW1zLCAkc3RhdGUpIHtcclxuXHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgdm0udXNlciA9IHt9O1xyXG4gICAgdm0uZXJyb3JJbmZvID0ge307XHJcblxyXG4gICAgdm0ucHVibGljU2lnbnVwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBuZXdVc2VyID0gbmV3IFVzZXJzLmFwaSh2bS51c2VyKTtcclxuXHJcbiAgICAgIG5ld1VzZXIuJHNhdmUoZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICBzdG9yZS5zZXQoJ2p3dCcsIHJlc3BvbnNlLnRva2VuKTtcclxuICAgICAgICAkc3RhdGUuZ28oJ2Rhc2hib2FyZCcpO1xyXG4gICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICB2bS5lcnJvckluZm8gPSBlcnIuZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNpZ251cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvL3ZhciB1c2VyUm9sZSA9ICh2bS51c2VyLnJvbGUpID8gJ0FkbWluJyA6ICdUZWNoJztcclxuICAgICAgLy8gc2V0IGNvZGUgZm9yIHVzZXIgcm9sZVxyXG4gICAgICBpZih2bS51c2VyLnJvbGUpIHtcclxuICAgICAgICB2bS51c2VyLmNvZGUgPSAneWI5YjYzN2kydic7XHJcbiAgICAgICAgdm0udXNlci5yb2xlID0gJ0FkbWluJztcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIHZtLnVzZXIuY29kZSA9ICdkdzc3eWVlMTh1JztcclxuICAgICAgICB2bS51c2VyLnJvbGUgPSAnVGVjaCc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBuZXdVc2VyID0gbmV3IFVzZXJzLmFwaSh2bS51c2VyKTtcclxuXHJcbiAgICAgIG5ld1VzZXIuJHNhdmUoZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAvLyBhZGQgdXNlciB0byB0aGUgbGlzdFxyXG4gICAgICAgIHZtLnVzZXJzLnB1c2gocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgLy8gcmVzZXQgZm9ybVxyXG4gICAgICAgIHZtLnVzZXIgPSB7fTtcclxuICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgdm0uZXJyb3JJbmZvID0gZXJyLmRhdGE7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5zaWduaW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHVzZXIgPSBuZXcgVXNlcnMuc2lnbmluKHZtLnVzZXIpO1xyXG5cclxuICAgICAgdXNlci4kc2F2ZShmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgc3RvcmUuc2V0KCdqd3QnLCByZXNwb25zZS50b2tlbik7XHJcbiAgICAgICAgLy8kd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3BhbmVsIy8nO1xyXG4gICAgICAgICAgJHN0YXRlLmdvKCdkYXNoYm9hcmQnKTtcclxuXHJcbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIHZtLmVycm9ySW5mbyA9IGVyci5kYXRhO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZ2V0QWxsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIFVzZXJzLmFwaS5xdWVyeShmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgIHZtLnVzZXJzID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIHJldHVybiBlLl9pZCAhPT0gdm0uY3VycmVudFVzZXIuX2lkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZ2V0T25lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIFVzZXJzLmFwaS5nZXQoe1xyXG4gICAgICAgIGlkOiAkc3RhdGVQYXJhbXMuaWRcclxuICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICB2bS51c2VyID0gcmVzcG9uc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5nZXRDdXJyZW50VXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5jdXJyZW50VXNlciA9IFVzZXJTZXJ2LmdldEN1cnJlbnRVc2VyRGF0YSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdm0udXNlci4kdXBkYXRlKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgJHN0YXRlLmdvKCd1c2VyTGlzdCcpO1xyXG4gICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICB2bS5lcnJvckluZm8gPSBlcnIuZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnJlbW92ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcclxuICAgICAgdmFyIGNvbmZpcm0gPSAkd2luZG93LmNvbmZpcm0oJ1F1aWVyZXMgZWxpbWluYXIgZWwgdXN1YXJpbyAnICsgdXNlci5maXJzdE5hbWUgKyAnICcgKyB1c2VyLmxhc3ROYW1lICsgJyA/Jyk7XHJcblxyXG4gICAgICBpZiAoY29uZmlybSkge1xyXG4gICAgICAgIHVzZXIuJHJlbW92ZSgpO1xyXG4gICAgICAgIHZtLnVzZXJzID0gdm0udXNlcnMuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIHJldHVybiBlLl9pZCAhPT0gdXNlci5faWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgXHJcbiAgfV0pO1xyXG5cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1c2VyJylcclxuICAuZGlyZWN0aXZlKFwiY29tcGFyZVRvXCIsIFtmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlcXVpcmU6IFwibmdNb2RlbFwiLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIG90aGVyTW9kZWxWYWx1ZTogXCI9Y29tcGFyZVRvXCJcclxuICAgICAgfSxcclxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIG5nTW9kZWwpIHtcclxuXHJcbiAgICAgICAgbmdNb2RlbC4kdmFsaWRhdG9ycy5jb21wYXJlVG8gPSBmdW5jdGlvbihtb2RlbFZhbHVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZSA9PSBzY29wZS5vdGhlck1vZGVsVmFsdWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2NvcGUuJHdhdGNoKFwib3RoZXJNb2RlbFZhbHVlXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbmdNb2RlbC4kdmFsaWRhdGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndXNlcicpXHJcbiAgLmRpcmVjdGl2ZSgncmVjb3JkQXZhaWxhYmlsaXR5VmFsaWRhdG9yJywgWyckaHR0cCcsICdVc2VycycsIGZ1bmN0aW9uKCRodHRwLCBVc2Vycykge1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XHJcbiAgICAgICAgLy92YXIgYXBpVXJsID0gYXR0cnMucmVjb3JkQXZhaWxhYmlsaXR5VmFsaWRhdG9yO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRBc0xvYWRpbmcoYm9vbCkge1xyXG4gICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlY29yZExvYWRpbmcnLCAhYm9vbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRBc0F2YWlsYWJsZShib29sKSB7XHJcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncmVjb3JkQXZhaWxhYmxlJywgYm9vbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgc2V0QXNMb2FkaW5nKHRydWUpO1xyXG4gICAgICAgICAgc2V0QXNBdmFpbGFibGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgIC8vIHVzaW5nIHJlc291cmNlXHJcbiAgICAgICAgICB2YXIgZGF0YSA9IFVzZXJzLnNlYXJjaC5nZXQoe1xyXG4gICAgICAgICAgICBlbWFpbDogdmFsdWVcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgc2V0QXNMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICAgICAgICBzZXRBc0F2YWlsYWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfV0pOyIsIi8vQXJ0aWNsZXMgc2VydmljZSB1c2VkIGZvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIGFydGljbGVzIFJFU1QgZW5kcG9pbnRzXHJcbmFuZ3VsYXIubW9kdWxlKCd1c2VyJykuZmFjdG9yeSgnVXNlcnMnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uKCRyZXNvdXJjZSkge1xyXG5cclxuICAgIHZhciBhcGkgPSAkcmVzb3VyY2UoJ2FwaS91c2Vycy86aWQnLCB7XHJcbiAgICAgICAgaWQ6ICdAX2lkJ1xyXG4gICAgfSwge1xyXG4gICAgICAgIHVwZGF0ZToge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHNpZ25pbiA9ICRyZXNvdXJjZSgnYXBpL3VzZXJzL3NpZ25pbicpO1xyXG5cclxuICAgIHZhciBsb2dvdXQgPSAkcmVzb3VyY2UoJ2FwaS91c2Vycy9sb2dvdXQvOmlkJywge1xyXG4gICAgICAgIGlkOiAnQF9pZCdcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBzZWFyY2ggPSAkcmVzb3VyY2UoJ2FwaS91c2Vycy9zZWFyY2gvOmVtYWlsJywge1xyXG4gICAgICAgIGVtYWlsOiAnQGVtYWlsJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhcGk6IGFwaSxcclxuICAgICAgICBzaWduaW46IHNpZ25pbixcclxuICAgICAgICBsb2dvdXQ6IGxvZ291dCxcclxuICAgICAgICBzZWFyY2g6IHNlYXJjaFxyXG4gICAgfTtcclxufVxyXG5dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
