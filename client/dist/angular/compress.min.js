function ClientCtrl(e,t,r,n){function a(t,r){e.search.query({id:null,number:t,lastName:r},function(e){o.clientList=e})}var i,o=this;o.clientModel={},o.clientSearch={},o.errorInfo={msg:null,data:null},o.successInfo={msg:null,data:null},o.create=function(t){var r=new e.api(o.clientModel);r.$save(function(e){angular.copy(i,o.clientModel),t.$setPristine(),t.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente creado con exito",o.successInfo.data=e},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})},o.search=function(){o.clientSearch.number?(o.searchWord=o.clientSearch.number,a(o.clientSearch.number,"null")):o.clientSearch.lastName&&(o.searchWord=o.clientSearch.lastName,a("null",o.clientSearch.lastName))},o.remove=function(e){var t=r.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");t&&e.$remove()},o.findOne=function(){e.api.get({id:n.id},function(e){o.clientModel=e})},o.update=function(e){o.clientModel.$update(function(t){e.$setPristine(),e.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente editado con exito",o.successInfo.data=t},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})}}function mainCtrl(e){var t=this,r=e.path();t.isHome="/"==r}function OrderCtrl(e,t,r,n,a){function i(e,r){t.search.query({id:null,number:e,lastName:r},function(e){l.clientList=e})}function o(t,r){e.search.query({id:null,number:t,lastName:r},function(e){l.orderList=e})}var l=this;l.orderModel={},l.orderSearch={},l.errorInfo={msg:null,data:null},l.successInfo={msg:null,data:null},l.solvedOpt=["No","Si"],l.orderStatus=["Cancelada","Asignada","Completada"],l.create=function(t){l.orderModel.client=l.clientData._id,l.orderModel.tech={id:"1",firstName:"Jesie",lastName:"Pinkman"};var r=new e.api(l.orderModel);r.$save(function(e){l.orderModel={},l.clientData=null,l.clientSearch={},l.clientList=null,t.$setPristine(),t.$setUntouched(),l.errorInfo.msg=null,l.successInfo.msg="Orden creada con exito",l.successInfo.data=e},function(e){l.successInfo.msg=null,l.errorInfo.msg=e.data})},l.searchClient=function(){l.clientSearch.number?(l.searchWord=l.clientSearch.number,i(l.clientSearch.number,"null")):l.clientSearch.lastName&&(l.searchWord=l.clientSearch.lastName,i("null",l.clientSearch.lastName))},l.searchOrder=function(){l.orderSearch.number?(l.searchWord=l.orderSearch.number,o(l.orderSearch.number,"null")):l.orderSearch.lastName&&(l.searchWord=l.orderSearch.lastName,o("null",l.orderSearch.lastName))},l.remove=function(e){var t=n.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");t&&e.$remove()},l.findOne=function(){e.api.get({id:a.id},function(e){l.orderModel=e})},l.update=function(e){l.orderModel.tech={id:"1",firstName:"Walter",lastName:"White"},l.orderModel.$update(function(t){e.$setPristine(),e.$setUntouched(),l.errorInfo.msg=null,l.successInfo.msg="Orden editada con Ã©xito",l.successInfo.data=t},function(e){l.successInfo.msg=null,l.errorInfo.msg=e.data})}}var appConfiguration=function(){var e="main",t=["ngResource","ui.router","angular-jwt","angular-storage","ngMessages"],r=function(t,r){angular.module(t,r||[]),angular.module(e).requires.push(t)};return{appName:e,appDependencies:t,registerModule:r}}();angular.module(appConfiguration.appName,appConfiguration.appDependencies),appConfiguration.registerModule("client"),appConfiguration.registerModule("order"),appConfiguration.registerModule("user"),angular.module("client").config(["$stateProvider",function(e){e.state("clientPanel",{url:"/clients",templateUrl:"modules/client/views/client-panel.client.view.html"}).state("editClient",{url:"/clients/:id/edit",templateUrl:"modules/client/views/edit-client.client.view.html"}).state("clientDetail",{url:"/clients/:id",templateUrl:"modules/client/views/client-detail.client.view.html",data:{requiresLogin:!0}})}]),angular.module("client").factory("Clients",["$resource",function(e){var t=e("api/clients/:id",{id:"@_id"},{update:{method:"PUT"}}),r=e("api/clients/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:t,search:r}}]),angular.module("client").controller("ClientCtrl",["Clients","$http","$window","$stateParams",ClientCtrl]),angular.module("main").config(["$stateProvider","$locationProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider",function(e,t,r,n,a){r.otherwise("/"),n.tokenGetter=["jwtHelper","$http","store","$state","$rootScope",function(e,t,r,n,a){var i=r.get("jwt");try{return e.isTokenExpired(i)?t({url:"http://localhost:3000/api/users/refresh",skipAuthorization:!0,method:"POST",data:{token:i}}).then(function(e){var t=e.data.token;return r.set("jwt",t),t},function(e){return r.remove("jwt"),n.go("signin"),!1}):i}catch(o){return r.remove("jwt"),!1}}],a.interceptors.push("jwtInterceptor"),e.state("home",{url:"/",templateUrl:"modules/main/views/home.client.view.html"}).state("dashboard",{url:"/dashboard",templateUrl:"modules/main/views/dashboard.client.view.html"})}]),angular.module("main").controller("mainCtrl",["$location",mainCtrl]),angular.module("order").config(["$stateProvider",function(e){e.state("orderPanel",{url:"/orders",templateUrl:"modules/order/views/order-panel.client.view.html"}).state("editorder",{url:"/orders/:id/edit",templateUrl:"modules/order/views/edit-order.client.view.html"}).state("orderDetail",{url:"/orders/:id",templateUrl:"modules/order/views/order-detail.client.view.html"})}]),angular.module("order").controller("OrderCtrl",["Orders","Clients","$http","$window","$stateParams",OrderCtrl]),angular.module("order").factory("Orders",["$resource",function(e){var t=e("api/orders/:id",{id:"@_id"},{update:{method:"PUT"}}),r=e("api/orders/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:t,search:r}}]),angular.module("user").config(["$stateProvider",function(e){e.state("signup",{url:"/signup",templateUrl:"modules/user/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/user/views/signin.client.view.html"}).state("secureview",{url:"/secureview",templateUrl:"modules/user/views/secureview.client.view.html",data:{requiresLogin:!0}})}]).run(["$rootScope","$location","store","jwtHelper",function(e,t,r,n){e.$on("$stateChangeStart",function(e,n){return n.data&&n.data.requiresLogin&&!r.get("jwt")?t.path("signin"):void 0})}]),angular.module("user").factory("Users",["$resource",function(e){var t=e("api/users/logout/:id",{id:"@_id"}),r=e("api/users/search/:name",{name:"@name"});return{logout:t,search:r}}]),angular.module("user").controller("UserController",["$scope","$location","Users","$http","store","jwtHelper",function(e,t,r,n,a,i){e.user={name:"",password:"",confirmPassword:""},e.signup=function(){n({url:"http://localhost:3000/api/users/signup",method:"POST",data:e.user}).then(function(e){a.set("jwt",e.data.token),t.path("/")},function(t){e.errMessage=t.data.message})},e.signin=function(){n({url:"http://localhost:3000/api/users/signin",method:"POST",data:e.user}).then(function(e){var r=e.data.token;a.set("jwt",r),t.path("/")},function(t){e.errMessage=t.data.message})},e.isAuth=function(){var t=a.get("jwt");return t?(e.payload=i.decodeToken(t),!0):!1},e.logout=function(){var e=a.get("jwt"),t=i.decodeToken(e);r.logout.get({id:t._id},function(){a.remove("jwt")})}}]),angular.module("user").directive("compareTo",[function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,r,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}]),angular.module("user").directive("recordAvailabilityValidator",["$http","Users",function(e,t){return{require:"ngModel",link:function(e,r,n,a){function i(e){a.$setValidity("recordLoading",!e)}function o(e){a.$setValidity("recordAvailable",e)}a.$parsers.push(function(e){if(e&&0!==e.length){i(!0),o(!1);var r=t.search.get({name:e},function(){null===r.data&&(i(!1),o(!0))});return e}})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC9jb250cm9sbGVycy9jbGllbnQuY2xpZW50LmNvbnRyb2xsZXIuanMiLCJtYWluL2NvbnRyb2xsZXJzL21haW4uY2xpZW50LmNvbnRyb2xsZXIuanMiLCJvcmRlci9jb250cm9sbGVycy9vcmRlci5jbGllbnQuY29udHJvbGxlci5qcyIsImNvbmZpZy1hcHAuanMiLCJtYWluLWFwcC5qcyIsImNsaWVudC9jbGllbnQuY2xpZW50LnJlZ2lzdGVyLmpzIiwib3JkZXIvb3JkZXIuY2xpZW50LnJlZ2lzdGVyLmpzIiwidXNlci91c2VyLmNsaWVudC5yZWdpc3Rlci5qcyIsImNsaWVudC9jb25maWcvY2xpZW50LmNsaWVudC5yb3V0ZXMuanMiLCJjbGllbnQvc2VydmljZXMvY2xpZW50LmNsaWVudC5zZXJ2aWNlLmpzIiwibWFpbi9jb25maWcvbWFpbi5jbGllbnQucm91dGVzLmpzIiwib3JkZXIvY29uZmlnL29yZGVyLmNsaWVudC5yb3V0ZXMuanMiLCJvcmRlci9zZXJ2aWNlcy9vcmRlci5jbGllbnQuc2VydmljZS5qcyIsInVzZXIvY29uZmlnL3VzZXIuY2xpZW50LnJvdXRlcy5qcyIsInVzZXIvc2VydmljZXMvdXNlci5jbGllbnQuc2VydmljZS5qcyIsInVzZXIvY29udHJvbGxlcnMvdXNlci5jbGllbnQuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJDbGllbnRDdHJsIiwiQ2xpZW50cyIsIiRodHRwIiwiJHdpbmRvdyIsIiRzdGF0ZVBhcmFtcyIsImdldENsaWVudCIsIm51bWJlciIsImxhc3ROYW1lIiwic2VhcmNoIiwicXVlcnkiLCJpZCIsInJlc3BvbnNlIiwidm0iLCJjbGllbnRMaXN0IiwibWFzdGVyTW9kZWwiLCJ0aGlzIiwiY2xpZW50TW9kZWwiLCJjbGllbnRTZWFyY2giLCJlcnJvckluZm8iLCJtc2ciLCJkYXRhIiwic3VjY2Vzc0luZm8iLCJjcmVhdGUiLCJmb3JtIiwibmV3Q2xpZW50IiwiYXBpIiwiJHNhdmUiLCJyZXMiLCJhbmd1bGFyIiwiY29weSIsIiRzZXRQcmlzdGluZSIsIiRzZXRVbnRvdWNoZWQiLCJlcnIiLCJzZWFyY2hXb3JkIiwicmVtb3ZlIiwiY2xpZW50IiwiY29uZmlybSIsImZpcnN0TmFtZSIsIiRyZW1vdmUiLCJmaW5kT25lIiwiZ2V0IiwidXBkYXRlIiwiJHVwZGF0ZSIsIm1haW5DdHJsIiwiJGxvY2F0aW9uIiwiY3VycmVudFBhdGgiLCJwYXRoIiwiaXNIb21lIiwiT3JkZXJDdHJsIiwiT3JkZXJzIiwiZ2V0Y2xpZW50IiwiZ2V0b3JkZXIiLCJvcmRlckxpc3QiLCJvcmRlck1vZGVsIiwib3JkZXJTZWFyY2giLCJzb2x2ZWRPcHQiLCJvcmRlclN0YXR1cyIsImNsaWVudERhdGEiLCJfaWQiLCJ0ZWNoIiwibmV3b3JkZXIiLCJzZWFyY2hDbGllbnQiLCJzZWFyY2hPcmRlciIsIm9yZGVyIiwiYXBwQ29uZmlndXJhdGlvbiIsImFwcE5hbWUiLCJhcHBEZXBlbmRlbmNpZXMiLCJyZWdpc3Rlck1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2R1bGVEZXBlbmRlbmNpZXMiLCJtb2R1bGUiLCJyZXF1aXJlcyIsInB1c2giLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJyZXF1aXJlc0xvZ2luIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsIm1ldGhvZCIsImNvbnRyb2xsZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsImp3dEludGVyY2VwdG9yUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwib3RoZXJ3aXNlIiwidG9rZW5HZXR0ZXIiLCJqd3RIZWxwZXIiLCJzdG9yZSIsIiRzdGF0ZSIsIiRyb290U2NvcGUiLCJpZFRva2VuIiwiaXNUb2tlbkV4cGlyZWQiLCJza2lwQXV0aG9yaXphdGlvbiIsInRva2VuIiwidGhlbiIsImlkX3Rva2VuIiwic2V0IiwiZ28iLCJpbnRlcmNlcHRvcnMiLCJydW4iLCIkb24iLCJlIiwidG8iLCJsb2dvdXQiLCJuYW1lIiwiJHNjb3BlIiwiVXNlcnMiLCJ1c2VyIiwicGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJzaWdudXAiLCJlcnJNZXNzYWdlIiwibWVzc2FnZSIsInNpZ25pbiIsImlzQXV0aCIsInBheWxvYWQiLCJkZWNvZGVUb2tlbiIsImRlY29kZWQiLCJkaXJlY3RpdmUiLCJyZXF1aXJlIiwic2NvcGUiLCJvdGhlck1vZGVsVmFsdWUiLCJsaW5rIiwiZWxlbWVudCIsImF0dHJpYnV0ZXMiLCJuZ01vZGVsIiwiJHZhbGlkYXRvcnMiLCJjb21wYXJlVG8iLCJtb2RlbFZhbHVlIiwiJHdhdGNoIiwiJHZhbGlkYXRlIiwiYXR0cnMiLCJzZXRBc0xvYWRpbmciLCJib29sIiwiJHNldFZhbGlkaXR5Iiwic2V0QXNBdmFpbGFibGUiLCIkcGFyc2VycyIsInZhbHVlIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSxRQUFBQSxZQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQWlGQSxRQUFBQyxHQUFBQyxFQUFBQyxHQUNBTixFQUFBTyxPQUFBQyxPQUNBQyxHQUFBLEtBQ0FKLE9BQUFBLEVBQ0FDLFNBQUFBLEdBQ0EsU0FBQUksR0FDQUMsRUFBQUMsV0FBQUYsSUF0RkEsR0FFQUcsR0FGQUYsRUFBQUcsSUFJQUgsR0FBQUksZUFDQUosRUFBQUssZ0JBQ0FMLEVBQUFNLFdBQ0FDLElBQUEsS0FDQUMsS0FBQSxNQUVBUixFQUFBUyxhQUNBRixJQUFBLEtBQ0FDLEtBQUEsTUFHQVIsRUFBQVUsT0FBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUEsR0FBQXZCLEdBQUF3QixJQUFBYixFQUFBSSxZQUVBUSxHQUFBRSxNQUFBLFNBQUFDLEdBRUFDLFFBQUFDLEtBQUFmLEVBQUFGLEVBQUFJLGFBQ0FPLEVBQUFPLGVBQ0FQLEVBQUFRLGdCQUVBbkIsRUFBQU0sVUFBQUMsSUFBQSxLQUNBUCxFQUFBUyxZQUFBRixJQUFBLDJCQUNBUCxFQUFBUyxZQUFBRCxLQUFBTyxHQUNBLFNBQUFLLEdBRUFwQixFQUFBUyxZQUFB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QUFBeEQsT0FBQSxhQU1BTixRQUFBMEMsT0FBQSxRQUNBbUQsVUFBQSxhQUFBLFdBQ0EsT0FDQUMsUUFBQSxVQUNBQyxPQUNBQyxnQkFBQSxjQUVBQyxLQUFBLFNBQUFGLEVBQUFHLEVBQUFDLEVBQUFDLEdBRUFBLEVBQUFDLFlBQUFDLFVBQUEsU0FBQUMsR0FDQSxNQUFBQSxJQUFBUixFQUFBQyxpQkFHQUQsRUFBQVMsT0FBQSxrQkFBQSxXQUNBSixFQUFBSyxtQkFNQXpHLFFBQUEwQyxPQUFBLFFBQ0FtRCxVQUFBLCtCQUFBLFFBQUEsUUFBQSxTQUFBdkgsRUFBQTJHLEdBRUEsT0FDQWEsUUFBQSxVQUNBRyxLQUFBLFNBQUFGLEVBQUFHLEVBQUFRLEVBQUFOLEdBR0EsUUFBQU8sR0FBQUMsR0FDQVIsRUFBQVMsYUFBQSxpQkFBQUQsR0FHQSxRQUFBRSxHQUFBRixHQUNBUixFQUFBUyxhQUFBLGtCQUFBRCxHQUdBUixFQUFBVyxTQUFBbkUsS0FBQSxTQUFBb0UsR0FDQSxHQUFBQSxHQUFBLElBQUFBLEVBQUFDLE9BQUEsQ0FFQU4sR0FBQSxHQUNBRyxHQUFBLEVBR0EsSUFBQXRILEdBQUF5RixFQUFBckcsT0FBQWdDLEtBQ0FtRSxLQUFBaUMsR0FDQSxXQUNBLE9BQUF4SCxFQUFBQSxPQUNBbUgsR0FBQSxHQUNBRyxHQUFBLEtBR0EsT0FBQUUiLCJmaWxlIjoiY29tcHJlc3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQ2xpZW50Q3RybChDbGllbnRzLCAkaHR0cCwgJHdpbmRvdywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgdmFyIG1hc3Rlck1vZGVsO1xyXG5cclxuICB2bS5jbGllbnRNb2RlbCA9IHt9O1xyXG4gIHZtLmNsaWVudFNlYXJjaCA9IHt9O1xyXG4gIHZtLmVycm9ySW5mbyA9IHtcclxuICAgIG1zZzogbnVsbCxcclxuICAgIGRhdGE6IG51bGxcclxuICB9O1xyXG4gIHZtLnN1Y2Nlc3NJbmZvID0ge1xyXG4gICAgbXNnOiBudWxsLFxyXG4gICAgZGF0YTogbnVsbFxyXG4gIH07XHJcblxyXG4gIHZtLmNyZWF0ZSA9IGZ1bmN0aW9uKGZvcm0pIHtcclxuICAgIHZhciBuZXdDbGllbnQgPSBuZXcgQ2xpZW50cy5hcGkodm0uY2xpZW50TW9kZWwpO1xyXG5cclxuICAgIG5ld0NsaWVudC4kc2F2ZShmdW5jdGlvbihyZXMpIHtcclxuICAgICAgLy9yZXNldCBmb3JtXHJcbiAgICAgIGFuZ3VsYXIuY29weShtYXN0ZXJNb2RlbCwgdm0uY2xpZW50TW9kZWwpO1xyXG4gICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gJ0NsaWVudGUgY3JlYWRvIGNvbiBleGl0byc7XHJcbiAgICAgIHZtLnN1Y2Nlc3NJbmZvLmRhdGEgPSByZXM7XHJcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5zdWNjZXNzSW5mby5tc2cgPSBudWxsO1xyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gZXJyLmRhdGE7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2bS5zZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICh2bS5jbGllbnRTZWFyY2gubnVtYmVyKSB7XHJcbiAgICAgIHZtLnNlYXJjaFdvcmQgPSB2bS5jbGllbnRTZWFyY2gubnVtYmVyO1xyXG4gICAgICBnZXRDbGllbnQodm0uY2xpZW50U2VhcmNoLm51bWJlciwgJ251bGwnKTtcclxuICAgIH0gZWxzZSBpZiAodm0uY2xpZW50U2VhcmNoLmxhc3ROYW1lKSB7XHJcbiAgICAgIHZtLnNlYXJjaFdvcmQgPSB2bS5jbGllbnRTZWFyY2gubGFzdE5hbWU7XHJcbiAgICAgIGdldENsaWVudCgnbnVsbCcsIHZtLmNsaWVudFNlYXJjaC5sYXN0TmFtZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdm0ucmVtb3ZlID0gZnVuY3Rpb24oY2xpZW50KSB7XHJcbiAgICB2YXIgY29uZmlybSA9ICR3aW5kb3cuY29uZmlybSgnUXVpZXJlcyBlbGltaW5hciBhICcgKyBjbGllbnQuZmlyc3ROYW1lICsgJyAnICsgY2xpZW50Lmxhc3ROYW1lICsgJyA/Jyk7XHJcblxyXG4gICAgaWYgKGNvbmZpcm0pIHtcclxuICAgICAgY2xpZW50LiRyZW1vdmUoKTtcclxuICAgICAgICAvLyB2bS5jbGllbnRMaXN0ID0gdm0uY2xpZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vICAgcmV0dXJuIGUuX2lkICE9PSBjbGllbnQuX2lkO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZtLmZpbmRPbmUgPSBmdW5jdGlvbigpIHtcclxuICAgIENsaWVudHMuYXBpLmdldCh7XHJcbiAgICAgIGlkOiAkc3RhdGVQYXJhbXMuaWRcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIHZtLmNsaWVudE1vZGVsID0gcmVzcG9uc2U7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2bS51cGRhdGUgPSBmdW5jdGlvbihmb3JtKXtcclxuICAgIHZtLmNsaWVudE1vZGVsLiR1cGRhdGUoZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgIC8vcmVzZXQgZm9ybVxyXG4gICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcclxuICAgICAgLy9hbGVydFxyXG4gICAgICB2bS5lcnJvckluZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gJ0NsaWVudGUgZWRpdGFkbyBjb24gZXhpdG8nO1xyXG4gICAgICB2bS5zdWNjZXNzSW5mby5kYXRhID0gcmVzO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgIC8vYWxlcnRcclxuICAgICAgdm0uc3VjY2Vzc0luZm8ubXNnID0gbnVsbDtcclxuICAgICAgdm0uZXJyb3JJbmZvLm1zZyA9IGVyci5kYXRhO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gZnVuY3RvbiBoZWxwZXJzIChwcml2YXRlKVxyXG4gIGZ1bmN0aW9uIGdldENsaWVudChudW1iZXIsIGxhc3ROYW1lKSB7XHJcbiAgICBDbGllbnRzLnNlYXJjaC5xdWVyeSh7XHJcbiAgICAgICdpZCc6IG51bGwsXHJcbiAgICAgICdudW1iZXInOiBudW1iZXIsXHJcbiAgICAgICdsYXN0TmFtZSc6IGxhc3ROYW1lXHJcbiAgICB9LCBmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgIHZtLmNsaWVudExpc3QgPSByZXNwb25zZTtcclxuICAgIH0pOyAgXHJcbiAgfVxyXG5cclxufVxyXG5cclxuYW5ndWxhclxyXG4gIC5tb2R1bGUoJ2NsaWVudCcpXHJcbiAgLmNvbnRyb2xsZXIoJ0NsaWVudEN0cmwnLCBbJ0NsaWVudHMnLCAnJGh0dHAnLCAnJHdpbmRvdycsICckc3RhdGVQYXJhbXMnLCBDbGllbnRDdHJsXSk7XHJcbi8vIGFuZ3VsYXIubW9kdWxlKCd1c2VyJylcclxuLy8gICAuZGlyZWN0aXZlKCdyZWNvcmRBdmFpbGFiaWxpdHlWYWxpZGF0b3InLCBbJyRodHRwJywgJ1VzZXJzJywgZnVuY3Rpb24oJGh0dHAsIFVzZXJzKSB7XHJcblxyXG4vLyAgICAgcmV0dXJuIHtcclxuLy8gICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4vLyAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuLy8gICAgICAgICAvL3ZhciBhcGlVcmwgPSBhdHRycy5yZWNvcmRBdmFpbGFiaWxpdHlWYWxpZGF0b3I7XHJcblxyXG4vLyAgICAgICAgIGZ1bmN0aW9uIHNldEFzTG9hZGluZyhib29sKSB7XHJcbi8vICAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncmVjb3JkTG9hZGluZycsICFib29sKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIGZ1bmN0aW9uIHNldEFzQXZhaWxhYmxlKGJvb2wpIHtcclxuLy8gICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdyZWNvcmRBdmFpbGFibGUnLCBib29sKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIG5nTW9kZWwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG4vLyAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbi8vICAgICAgICAgICBzZXRBc0xvYWRpbmcodHJ1ZSk7XHJcbi8vICAgICAgICAgICBzZXRBc0F2YWlsYWJsZShmYWxzZSk7XHJcblxyXG4vLyAgICAgICAgICAgLy8gdXNpbmcgcmVzb3VyY2VcclxuLy8gICAgICAgICAgIHZhciBkYXRhID0gVXNlcnMuc2VhcmNoLmdldCh7XHJcbi8vICAgICAgICAgICAgIG5hbWU6IHZhbHVlXHJcbi8vICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSA9PT0gJycpIHtcclxuLy8gICAgICAgICAgICAgICBzZXRBc0xvYWRpbmcoZmFsc2UpO1xyXG4vLyAgICAgICAgICAgICAgIHNldEFzQXZhaWxhYmxlKHRydWUpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgICAgfVxyXG4vLyAgICAgfTtcclxuLy8gICB9XSk7IiwiZnVuY3Rpb24gbWFpbkN0cmwoJGxvY2F0aW9uKSB7XHJcblx0dmFyIHZtID0gdGhpcztcclxuXHJcblx0dmFyIGN1cnJlbnRQYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcclxuXHR2bS5pc0hvbWUgPSAoY3VycmVudFBhdGggPT0gJy8nKSA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuYW5ndWxhclxyXG5cdC5tb2R1bGUoJ21haW4nKVxyXG5cdC5jb250cm9sbGVyKCdtYWluQ3RybCcsIFsnJGxvY2F0aW9uJywgbWFpbkN0cmxdKTsiLCJmdW5jdGlvbiBPcmRlckN0cmwoT3JkZXJzLCBDbGllbnRzLCAkaHR0cCwgJHdpbmRvdywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgdm0ub3JkZXJNb2RlbCA9IHt9O1xyXG4gIHZtLm9yZGVyU2VhcmNoID0ge307XHJcbiAgdm0uZXJyb3JJbmZvID0ge1xyXG4gICAgbXNnOiBudWxsLFxyXG4gICAgZGF0YTogbnVsbFxyXG4gIH07XHJcbiAgdm0uc3VjY2Vzc0luZm8gPSB7XHJcbiAgICBtc2c6IG51bGwsXHJcbiAgICBkYXRhOiBudWxsXHJcbiAgfTtcclxuICB2bS5zb2x2ZWRPcHQgPSBbJ05vJywgJ1NpJ107XHJcbiAgdm0ub3JkZXJTdGF0dXMgPSBbJ0NhbmNlbGFkYScsICdBc2lnbmFkYScsICdDb21wbGV0YWRhJ107XHJcblxyXG4gIHZtLmNyZWF0ZSA9IGZ1bmN0aW9uKGZvcm0pIHtcclxuICAgIC8vIGhhcmRjb2RlIGF0dHJcclxuICAgIHZtLm9yZGVyTW9kZWwuY2xpZW50ID0gdm0uY2xpZW50RGF0YS5faWQ7XHJcbiAgICAvLyBUT0RPXHJcbiAgICB2bS5vcmRlck1vZGVsLnRlY2ggPSB7XHJcbiAgICAgIGlkOiAnMScsXHJcbiAgICAgIGZpcnN0TmFtZTogJ0plc2llJyxcclxuICAgICAgbGFzdE5hbWU6ICdQaW5rbWFuJ1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmV3b3JkZXIgPSBuZXcgT3JkZXJzLmFwaSh2bS5vcmRlck1vZGVsKTtcclxuXHJcbiAgICBuZXdvcmRlci4kc2F2ZShmdW5jdGlvbihyZXMpIHtcclxuICAgICAgLy9yZXNldCBmb3JtXHJcbiAgICAgIHZtLm9yZGVyTW9kZWwgPSB7fTtcclxuICAgICAgdm0uY2xpZW50RGF0YSA9IG51bGw7XHJcbiAgICAgIHZtLmNsaWVudFNlYXJjaCA9IHt9O1xyXG4gICAgICB2bS5jbGllbnRMaXN0ID0gbnVsbDtcclxuICAgICAgZm9ybS4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgZm9ybS4kc2V0VW50b3VjaGVkKCk7XHJcbiAgICAgIC8vYWxlcnRcclxuICAgICAgdm0uZXJyb3JJbmZvLm1zZyA9IG51bGw7XHJcbiAgICAgIHZtLnN1Y2Nlc3NJbmZvLm1zZyA9ICdPcmRlbiBjcmVhZGEgY29uIGV4aXRvJztcclxuICAgICAgdm0uc3VjY2Vzc0luZm8uZGF0YSA9IHJlcztcclxuICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAvL2FsZXJ0XHJcbiAgICAgIHZtLnN1Y2Nlc3NJbmZvLm1zZyA9IG51bGw7XHJcbiAgICAgIHZtLmVycm9ySW5mby5tc2cgPSBlcnIuZGF0YTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZtLnNlYXJjaENsaWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHZtLmNsaWVudFNlYXJjaC5udW1iZXIpIHtcclxuICAgICAgdm0uc2VhcmNoV29yZCA9IHZtLmNsaWVudFNlYXJjaC5udW1iZXI7XHJcbiAgICAgIGdldGNsaWVudCh2bS5jbGllbnRTZWFyY2gubnVtYmVyLCAnbnVsbCcpO1xyXG4gICAgfSBlbHNlIGlmICh2bS5jbGllbnRTZWFyY2gubGFzdE5hbWUpIHtcclxuICAgICAgdm0uc2VhcmNoV29yZCA9IHZtLmNsaWVudFNlYXJjaC5sYXN0TmFtZTtcclxuICAgICAgZ2V0Y2xpZW50KCdudWxsJywgdm0uY2xpZW50U2VhcmNoLmxhc3ROYW1lKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2bS5zZWFyY2hPcmRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHZtLm9yZGVyU2VhcmNoLm51bWJlcikge1xyXG4gICAgICB2bS5zZWFyY2hXb3JkID0gdm0ub3JkZXJTZWFyY2gubnVtYmVyO1xyXG4gICAgICBnZXRvcmRlcih2bS5vcmRlclNlYXJjaC5udW1iZXIsICdudWxsJyk7XHJcbiAgICB9IGVsc2UgaWYgKHZtLm9yZGVyU2VhcmNoLmxhc3ROYW1lKSB7XHJcbiAgICAgIHZtLnNlYXJjaFdvcmQgPSB2bS5vcmRlclNlYXJjaC5sYXN0TmFtZTtcclxuICAgICAgZ2V0b3JkZXIoJ251bGwnLCB2bS5vcmRlclNlYXJjaC5sYXN0TmFtZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdm0ucmVtb3ZlID0gZnVuY3Rpb24ob3JkZXIpIHtcclxuICAgIHZhciBjb25maXJtID0gJHdpbmRvdy5jb25maXJtKCdRdWllcmVzIGVsaW1pbmFyIGEgJyArIG9yZGVyLmZpcnN0TmFtZSArICcgJyArIG9yZGVyLmxhc3ROYW1lICsgJyA/Jyk7XHJcblxyXG4gICAgaWYgKGNvbmZpcm0pIHtcclxuICAgICAgb3JkZXIuJHJlbW92ZSgpO1xyXG4gICAgICAvLyB2bS5vcmRlckxpc3QgPSB2bS5vcmRlckxpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgLy8gICByZXR1cm4gZS5faWQgIT09IG9yZGVyLl9pZDtcclxuICAgICAgLy8gfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdm0uZmluZE9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgT3JkZXJzLmFwaS5nZXQoe1xyXG4gICAgICBpZDogJHN0YXRlUGFyYW1zLmlkXHJcbiAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICB2bS5vcmRlck1vZGVsID0gcmVzcG9uc2U7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2bS51cGRhdGUgPSBmdW5jdGlvbihmb3JtKSB7XHJcbiAgICAvLyBUT0RPXHJcbiAgICB2bS5vcmRlck1vZGVsLnRlY2ggPSB7XHJcbiAgICAgIGlkOiAnMScsXHJcbiAgICAgIGZpcnN0TmFtZTogJ1dhbHRlcicsXHJcbiAgICAgIGxhc3ROYW1lOiAnV2hpdGUnXHJcbiAgICB9O1xyXG5cclxuICAgIHZtLm9yZGVyTW9kZWwuJHVwZGF0ZShmdW5jdGlvbihyZXMpIHtcclxuICAgICAgLy9yZXNldCBmb3JtXHJcbiAgICAgIGZvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgIGZvcm0uJHNldFVudG91Y2hlZCgpO1xyXG4gICAgICAvL2FsZXJ0XHJcbiAgICAgIHZtLmVycm9ySW5mby5tc2cgPSBudWxsO1xyXG4gICAgICB2bS5zdWNjZXNzSW5mby5tc2cgPSAnT3JkZW4gZWRpdGFkYSBjb24gw6l4aXRvJztcclxuICAgICAgdm0uc3VjY2Vzc0luZm8uZGF0YSA9IHJlcztcclxuICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAvL2FsZXJ0XHJcbiAgICAgIHZtLnN1Y2Nlc3NJbmZvLm1zZyA9IG51bGw7XHJcbiAgICAgIHZtLmVycm9ySW5mby5tc2cgPSBlcnIuZGF0YTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIGZ1bmN0b24gaGVscGVycyAocHJpdmF0ZSlcclxuICBmdW5jdGlvbiBnZXRjbGllbnQobnVtYmVyLCBsYXN0TmFtZSkge1xyXG4gICAgQ2xpZW50cy5zZWFyY2gucXVlcnkoe1xyXG4gICAgICAnaWQnOiBudWxsLFxyXG4gICAgICAnbnVtYmVyJzogbnVtYmVyLFxyXG4gICAgICAnbGFzdE5hbWUnOiBsYXN0TmFtZVxyXG4gICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgdm0uY2xpZW50TGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRvcmRlcihudW1iZXIsIGxhc3ROYW1lKSB7XHJcbiAgICBPcmRlcnMuc2VhcmNoLnF1ZXJ5KHtcclxuICAgICAgJ2lkJzogbnVsbCxcclxuICAgICAgJ251bWJlcic6IG51bWJlcixcclxuICAgICAgJ2xhc3ROYW1lJzogbGFzdE5hbWVcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgIHZtLm9yZGVyTGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuYW5ndWxhclxyXG4gIC5tb2R1bGUoJ29yZGVyJylcclxuICAuY29udHJvbGxlcignT3JkZXJDdHJsJywgWydPcmRlcnMnLCAnQ2xpZW50cycsICckaHR0cCcsICckd2luZG93JywgJyRzdGF0ZVBhcmFtcycsIE9yZGVyQ3RybF0pO1xyXG4vLyBhbmd1bGFyLm1vZHVsZSgndXNlcicpXHJcbi8vICAgLmRpcmVjdGl2ZSgncmVjb3JkQXZhaWxhYmlsaXR5VmFsaWRhdG9yJywgWyckaHR0cCcsICdVc2VycycsIGZ1bmN0aW9uKCRodHRwLCBVc2Vycykge1xyXG5cclxuLy8gICAgIHJldHVybiB7XHJcbi8vICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuLy8gICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XHJcbi8vICAgICAgICAgLy92YXIgYXBpVXJsID0gYXR0cnMucmVjb3JkQXZhaWxhYmlsaXR5VmFsaWRhdG9yO1xyXG5cclxuLy8gICAgICAgICBmdW5jdGlvbiBzZXRBc0xvYWRpbmcoYm9vbCkge1xyXG4vLyAgICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlY29yZExvYWRpbmcnLCAhYm9vbCk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBmdW5jdGlvbiBzZXRBc0F2YWlsYWJsZShib29sKSB7XHJcbi8vICAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncmVjb3JkQXZhaWxhYmxlJywgYm9vbCk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuLy8gICAgICAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4vLyAgICAgICAgICAgc2V0QXNMb2FkaW5nKHRydWUpO1xyXG4vLyAgICAgICAgICAgc2V0QXNBdmFpbGFibGUoZmFsc2UpO1xyXG5cclxuLy8gICAgICAgICAgIC8vIHVzaW5nIHJlc291cmNlXHJcbi8vICAgICAgICAgICB2YXIgZGF0YSA9IFVzZXJzLnNlYXJjaC5nZXQoe1xyXG4vLyAgICAgICAgICAgICBuYW1lOiB2YWx1ZVxyXG4vLyAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgICAgICAgIGlmIChkYXRhLmRhdGEgPT09ICcnKSB7XHJcbi8vICAgICAgICAgICAgICAgc2V0QXNMb2FkaW5nKGZhbHNlKTtcclxuLy8gICAgICAgICAgICAgICBzZXRBc0F2YWlsYWJsZSh0cnVlKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICAgIH1cclxuLy8gICAgIH07XHJcbi8vICAgfV0pOyIsInZhciBhcHBDb25maWd1cmF0aW9uID0gKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBhcHBOYW1lID0gJ21haW4nO1xyXG5cdHZhciBhcHBEZXBlbmRlbmNpZXMgPSBbJ25nUmVzb3VyY2UnLCAndWkucm91dGVyJywgJ2FuZ3VsYXItand0JywgJ2FuZ3VsYXItc3RvcmFnZScsICduZ01lc3NhZ2VzJ107XHJcblxyXG5cdC8vTWV0aG9kIGZvciBhZGQgbmV3IG1vZHVsZXNcclxuXHR2YXIgcmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbihtb2R1bGVOYW1lLCBtb2R1bGVEZXBlbmRlbmNpZXMpIHtcclxuXHRcdC8vIENyZWF0ZSBtb2R1bGVcclxuXHRcdGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIG1vZHVsZURlcGVuZGVuY2llcyB8fCBbXSk7XHJcblxyXG5cdFx0Ly8gQWRkIHRoZSBuZXcgbW9kdWxlIHRvIHRoZSBhbmd1bGFyIGNvbmZpZyBmaWxlXHJcblx0XHRhbmd1bGFyLm1vZHVsZShhcHBOYW1lKS5yZXF1aXJlcy5wdXNoKG1vZHVsZU5hbWUpO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRhcHBOYW1lOiBhcHBOYW1lLFxyXG5cdFx0YXBwRGVwZW5kZW5jaWVzOiBhcHBEZXBlbmRlbmNpZXMsXHJcblx0XHRyZWdpc3Rlck1vZHVsZTogcmVnaXN0ZXJNb2R1bGVcclxuXHR9XHJcbn0pICgpOyIsIi8vRGVmaW5lIG1haW4gbW9kdWxlXHJcbmFuZ3VsYXIubW9kdWxlKGFwcENvbmZpZ3VyYXRpb24uYXBwTmFtZSwgYXBwQ29uZmlndXJhdGlvbi5hcHBEZXBlbmRlbmNpZXMpOyIsImFwcENvbmZpZ3VyYXRpb24ucmVnaXN0ZXJNb2R1bGUoJ2NsaWVudCcpOyIsImFwcENvbmZpZ3VyYXRpb24ucmVnaXN0ZXJNb2R1bGUoJ29yZGVyJyk7IiwiYXBwQ29uZmlndXJhdGlvbi5yZWdpc3Rlck1vZHVsZSgndXNlcicpOyIsImFuZ3VsYXIubW9kdWxlKCdjbGllbnQnKVxyXG4gIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyKSB7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdjbGllbnRQYW5lbCcsIHtcclxuICAgICAgICB1cmw6ICcvY2xpZW50cycsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2NsaWVudC92aWV3cy9jbGllbnQtcGFuZWwuY2xpZW50LnZpZXcuaHRtbCdcclxuICAgICAgfSkuc3RhdGUoJ2VkaXRDbGllbnQnLCB7XHJcbiAgICAgICAgdXJsOiAnL2NsaWVudHMvOmlkL2VkaXQnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9jbGllbnQvdmlld3MvZWRpdC1jbGllbnQuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgIH0pLnN0YXRlKCdjbGllbnREZXRhaWwnLCB7XHJcbiAgICAgICAgdXJsOiAnL2NsaWVudHMvOmlkJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvY2xpZW50L3ZpZXdzL2NsaWVudC1kZXRhaWwuY2xpZW50LnZpZXcuaHRtbCcsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgcmVxdWlyZXNMb2dpbjogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfV0pOyIsIi8vQXJ0aWNsZXMgc2VydmljZSB1c2VkIGZvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIGFydGljbGVzIFJFU1QgZW5kcG9pbnRzXHJcbmFuZ3VsYXIubW9kdWxlKCdjbGllbnQnKS5mYWN0b3J5KCdDbGllbnRzJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbigkcmVzb3VyY2UpIHtcclxuXHJcblx0dmFyIGFwaSA9ICRyZXNvdXJjZSgnYXBpL2NsaWVudHMvOmlkJywge1xyXG5cdFx0aWQ6ICdAX2lkJ1xyXG5cdH0sIHtcclxuXHRcdHVwZGF0ZToge1xyXG5cdFx0XHRtZXRob2Q6ICdQVVQnXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHZhciBzZWFyY2ggPSAkcmVzb3VyY2UoJ2FwaS9jbGllbnRzLzppZC9zZWFyY2gvOm51bWJlci86bGFzdE5hbWUnLCB7XHJcblx0XHRpZDogJ0BfaWQnLFxyXG5cdFx0bnVtYmVyOiAnbnVtYmVyJyxcclxuXHRcdGxhc3ROYW1lOiAnbGFzdE5hbWUnXHJcblx0fSk7XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRhcGk6IGFwaSxcclxuXHRcdHNlYXJjaDogc2VhcmNoXHJcblx0fTtcclxufV0pOyIsImFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ21haW4nKVxyXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICdqd3RJbnRlcmNlcHRvclByb3ZpZGVyJywgJyRodHRwUHJvdmlkZXInLCBmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgand0SW50ZXJjZXB0b3JQcm92aWRlciwgJGh0dHBQcm92aWRlcikge1xyXG4gICAgICAgIC8vIFJlZGlyZWN0IHRvIGhvbWUgdmlldyB3aGVuIHJvdXRlIG5vdCBmb3VuZFxyXG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcclxuXHJcbiAgICAgICAgLy8gdXNlIHRoZSBIVE1MNSBIaXN0b3J5IEFQSVxyXG4gICAgICAgIC8vJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG5cclxuICAgICAgICAvLyBnZXQgdG9rZW4gdG8gbG9jYWwgc3RvcmFnZSBhbmQgc2V0IG9uIHRoZSBoZWFkZXJzXHJcbiAgICAgICAgand0SW50ZXJjZXB0b3JQcm92aWRlci50b2tlbkdldHRlciA9IFsnand0SGVscGVyJywgJyRodHRwJywgJ3N0b3JlJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oand0SGVscGVyLCAkaHR0cCwgc3RvcmUsICRzdGF0ZSwgJHJvb3RTY29wZSkge1xyXG4gICAgICAgICAgICB2YXIgaWRUb2tlbiA9IHN0b3JlLmdldCgnand0Jyk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoand0SGVscGVyLmlzVG9rZW5FeHBpcmVkKGlkVG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHByb21pc2Ugb2YgYSBKV1QgaWRfdG9rZW5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3VzZXJzL3JlZnJlc2gnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG1ha2VzIGl0IHNvIHRoYXQgdGhpcyByZXF1ZXN0IGRvZXNuJ3Qgc2VuZCB0aGUgSldUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBBdXRob3JpemF0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGlkVG9rZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkX3Rva2VuID0gcmVzcG9uc2UuZGF0YS50b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuc2V0KCdqd3QnLCBpZF90b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZF90b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUucmVtb3ZlKCdqd3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzaWduaW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRUb2tlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5yZW1vdmUoJ2p3dCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV07XHJcbiAgICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnand0SW50ZXJjZXB0b3InKTtcclxuXHJcbiAgICAgICAgLy8gSG9tZSBzdGF0ZSByb3V0aW5nXHJcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvbWFpbi92aWV3cy9ob21lLmNsaWVudC52aWV3Lmh0bWwnXHJcbiAgICAgICAgICAgIH0pLnN0YXRlKCdkYXNoYm9hcmQnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvZGFzaGJvYXJkJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9tYWluL3ZpZXdzL2Rhc2hib2FyZC5jbGllbnQudmlldy5odG1sJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnb3JkZXInKVxyXG4gIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyKSB7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdvcmRlclBhbmVsJywge1xyXG4gICAgICAgIHVybDogJy9vcmRlcnMnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9vcmRlci92aWV3cy9vcmRlci1wYW5lbC5jbGllbnQudmlldy5odG1sJ1xyXG4gICAgICB9KS5zdGF0ZSgnZWRpdG9yZGVyJywge1xyXG4gICAgICAgIHVybDogJy9vcmRlcnMvOmlkL2VkaXQnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9vcmRlci92aWV3cy9lZGl0LW9yZGVyLmNsaWVudC52aWV3Lmh0bWwnLFxyXG4gICAgICB9KS5zdGF0ZSgnb3JkZXJEZXRhaWwnLCB7XHJcbiAgICAgICAgdXJsOiAnL29yZGVycy86aWQnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9vcmRlci92aWV3cy9vcmRlci1kZXRhaWwuY2xpZW50LnZpZXcuaHRtbCdcclxuICAgICAgfSk7XHJcbiAgfV0pOyIsIi8vQXJ0aWNsZXMgc2VydmljZSB1c2VkIGZvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIGFydGljbGVzIFJFU1QgZW5kcG9pbnRzXHJcbmFuZ3VsYXIubW9kdWxlKCdvcmRlcicpLmZhY3RvcnkoJ09yZGVycycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24oJHJlc291cmNlKSB7XHJcblxyXG5cdHZhciBhcGkgPSAkcmVzb3VyY2UoJ2FwaS9vcmRlcnMvOmlkJywge1xyXG5cdFx0aWQ6ICdAX2lkJ1xyXG5cdH0sIHtcclxuXHRcdHVwZGF0ZToge1xyXG5cdFx0XHRtZXRob2Q6ICdQVVQnXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHZhciBzZWFyY2ggPSAkcmVzb3VyY2UoJ2FwaS9vcmRlcnMvOmlkL3NlYXJjaC86bnVtYmVyLzpsYXN0TmFtZScsIHtcclxuXHRcdGlkOiAnQF9pZCcsXHJcblx0XHRudW1iZXI6ICdudW1iZXInLFxyXG5cdFx0bGFzdE5hbWU6ICdsYXN0TmFtZSdcclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGFwaTogYXBpLFxyXG5cdFx0c2VhcmNoOiBzZWFyY2hcclxuXHR9O1xyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ3VzZXInKVxyXG4gIC5jb25maWcoWyckc3RhdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyKSB7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdzaWdudXAnLCB7XHJcbiAgICAgICAgdXJsOiAnL3NpZ251cCcsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3VzZXIvdmlld3Mvc2lnbnVwLmNsaWVudC52aWV3Lmh0bWwnXHJcbiAgICAgIH0pLnN0YXRlKCdzaWduaW4nLCB7XHJcbiAgICAgICAgdXJsOiAnL3NpZ25pbicsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3VzZXIvdmlld3Mvc2lnbmluLmNsaWVudC52aWV3Lmh0bWwnLFxyXG4gICAgICB9KS5zdGF0ZSgnc2VjdXJldmlldycsIHtcclxuICAgICAgICB1cmw6ICcvc2VjdXJldmlldycsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3VzZXIvdmlld3Mvc2VjdXJldmlldy5jbGllbnQudmlldy5odG1sJyxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICByZXF1aXJlc0xvZ2luOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XSlcclxuICAucnVuKFsnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAnc3RvcmUnLCAnand0SGVscGVyJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGxvY2F0aW9uLCBzdG9yZSwgand0SGVscGVyKSB7XHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbihlLCB0bykge1xyXG4gICAgICBpZiAodG8uZGF0YSAmJiB0by5kYXRhLnJlcXVpcmVzTG9naW4pIHtcclxuICAgICAgICBpZiAoIXN0b3JlLmdldCgnand0JykpIHtcclxuICAgICAgICAgIHJldHVybiAkbG9jYXRpb24ucGF0aCgnc2lnbmluJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XSk7IiwiLy9BcnRpY2xlcyBzZXJ2aWNlIHVzZWQgZm9yIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgYXJ0aWNsZXMgUkVTVCBlbmRwb2ludHNcclxuYW5ndWxhci5tb2R1bGUoJ3VzZXInKS5mYWN0b3J5KCdVc2VycycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24oJHJlc291cmNlKSB7XHJcblxyXG4gICAgdmFyIGxvZ291dCA9ICRyZXNvdXJjZSgnYXBpL3VzZXJzL2xvZ291dC86aWQnLCB7XHJcbiAgICAgICAgaWQ6ICdAX2lkJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHNlYXJjaCA9ICRyZXNvdXJjZSgnYXBpL3VzZXJzL3NlYXJjaC86bmFtZScsIHtcclxuICAgICAgICBuYW1lOiAnQG5hbWUnXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvZ291dDogbG9nb3V0LFxyXG4gICAgICAgIHNlYXJjaDogc2VhcmNoXHJcbiAgICB9O1xyXG59XHJcbl0pOyIsImFuZ3VsYXIubW9kdWxlKCd1c2VyJylcclxuICAuY29udHJvbGxlcignVXNlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnVXNlcnMnLCAnJGh0dHAnLCAnc3RvcmUnLCAnand0SGVscGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIFVzZXJzLCAkaHR0cCwgc3RvcmUsIGp3dEhlbHBlcikge1xyXG4gICAgJHNjb3BlLnVzZXIgPSB7XHJcbiAgICAgIG5hbWU6IFwiXCIsXHJcbiAgICAgIHBhc3N3b3JkOiBcIlwiLFxyXG4gICAgICBjb25maXJtUGFzc3dvcmQ6IFwiXCJcclxuICAgIH07XHJcbiAgICAkc2NvcGUuc2lnbnVwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRodHRwKHtcclxuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3VzZXJzL3NpZ251cCcsXHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgZGF0YTogJHNjb3BlLnVzZXJcclxuICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgIHN0b3JlLnNldCgnand0JywgcmVzcG9uc2UuZGF0YS50b2tlbik7XHJcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgJHNjb3BlLmVyck1lc3NhZ2UgPSBlcnIuZGF0YS5tZXNzYWdlO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnNpZ25pbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkaHR0cCh7XHJcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS91c2Vycy9zaWduaW4nLFxyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGRhdGE6ICRzY29wZS51c2VyXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICB2YXIgdG9rZW4gPSByZXNwb25zZS5kYXRhLnRva2VuO1xyXG4gICAgICAgIHN0b3JlLnNldCgnand0JywgdG9rZW4pO1xyXG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICRzY29wZS5lcnJNZXNzYWdlID0gZXJyLmRhdGEubWVzc2FnZTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5pc0F1dGggPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHRva2VuID0gc3RvcmUuZ2V0KCdqd3QnKTtcclxuICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgJHNjb3BlLnBheWxvYWQgPSBqd3RIZWxwZXIuZGVjb2RlVG9rZW4odG9rZW4pO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB0b2tlbiA9IHN0b3JlLmdldCgnand0Jyk7XHJcbiAgICAgIHZhciBkZWNvZGVkID0gand0SGVscGVyLmRlY29kZVRva2VuKHRva2VuKTtcclxuICAgICAgVXNlcnMubG9nb3V0LmdldCh7XHJcbiAgICAgICAgaWQ6IGRlY29kZWQuX2lkXHJcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHN0b3JlLnJlbW92ZSgnand0Jyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XSk7XHJcblxyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3VzZXInKVxyXG4gIC5kaXJlY3RpdmUoXCJjb21wYXJlVG9cIiwgW2Z1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgb3RoZXJNb2RlbFZhbHVlOiBcIj1jb21wYXJlVG9cIlxyXG4gICAgICB9LFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgbmdNb2RlbCkge1xyXG5cclxuICAgICAgICBuZ01vZGVsLiR2YWxpZGF0b3JzLmNvbXBhcmVUbyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcclxuICAgICAgICAgIHJldHVybiBtb2RlbFZhbHVlID09IHNjb3BlLm90aGVyTW9kZWxWYWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS4kd2F0Y2goXCJvdGhlck1vZGVsVmFsdWVcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBuZ01vZGVsLiR2YWxpZGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1c2VyJylcclxuICAuZGlyZWN0aXZlKCdyZWNvcmRBdmFpbGFiaWxpdHlWYWxpZGF0b3InLCBbJyRodHRwJywgJ1VzZXJzJywgZnVuY3Rpb24oJGh0dHAsIFVzZXJzKSB7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuICAgICAgICAvL3ZhciBhcGlVcmwgPSBhdHRycy5yZWNvcmRBdmFpbGFiaWxpdHlWYWxpZGF0b3I7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEFzTG9hZGluZyhib29sKSB7XHJcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncmVjb3JkTG9hZGluZycsICFib29sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEFzQXZhaWxhYmxlKGJvb2wpIHtcclxuICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdyZWNvcmRBdmFpbGFibGUnLCBib29sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5nTW9kZWwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICBzZXRBc0xvYWRpbmcodHJ1ZSk7XHJcbiAgICAgICAgICBzZXRBc0F2YWlsYWJsZShmYWxzZSk7XHJcblxyXG4gICAgICAgICAgLy8gdXNpbmcgcmVzb3VyY2VcclxuICAgICAgICAgIHZhciBkYXRhID0gVXNlcnMuc2VhcmNoLmdldCh7XHJcbiAgICAgICAgICAgIG5hbWU6IHZhbHVlXHJcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIHNldEFzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgc2V0QXNBdmFpbGFibGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
