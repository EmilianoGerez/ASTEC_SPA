function ClientCtrl(e,t,r,n){function a(t,r){e.search.query({id:null,number:t,lastName:r},function(e){o.clientList=e})}var i,o=this;o.clientModel={},o.clientSearch={},o.errorInfo={msg:null,data:null},o.successInfo={msg:null,data:null},o.create=function(t){var r=new e.api(o.clientModel);r.$save(function(e){angular.copy(i,o.clientModel),t.$setPristine(),t.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente creado con exito",o.successInfo.data=e},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})},o.search=function(){o.clientSearch.number?(o.searchWord=o.clientSearch.number,a(o.clientSearch.number,"null")):o.clientSearch.lastName&&(o.searchWord=o.clientSearch.lastName,a("null",o.clientSearch.lastName))},o.remove=function(e){var t=r.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");t&&e.$remove()},o.findOne=function(){e.api.get({id:n.id},function(e){o.clientModel=e})},o.update=function(e){o.clientModel.$update(function(t){e.$setPristine(),e.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente editado con exito",o.successInfo.data=t},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})}}function mainCtrl(e){var t=this,r=e.path();t.isHome="/"==r}function OrderCtrl(e,t,r,n,a){function i(e,r){t.search.query({id:null,number:e,lastName:r},function(e){l.clientList=e})}function o(t,r){e.search.query({id:null,number:t,lastName:r},function(e){l.orderList=e})}var l=this;l.orderModel={},l.orderSearch={},l.errorInfo={msg:null,data:null},l.successInfo={msg:null,data:null},l.solvedOpt=["No","Si"],l.orderStatus=["Cancelada","Asignada","Completada"],l.create=function(t){l.orderModel.client=l.clientData._id,l.orderModel.tech={id:"1",firstName:"Jesie",lastName:"Pinkman"};var r=new e.api(l.orderModel);r.$save(function(e){l.orderModel={},l.clientData=null,l.clientSearch={},l.clientList=null,t.$setPristine(),t.$setUntouched(),l.errorInfo.msg=null,l.successInfo.msg="Orden creada con exito",l.successInfo.data=e},function(e){l.successInfo.msg=null,l.errorInfo.msg=e.data})},l.searchClient=function(){l.clientSearch.number?(l.searchWord=l.clientSearch.number,i(l.clientSearch.number,"null")):l.clientSearch.lastName&&(l.searchWord=l.clientSearch.lastName,i("null",l.clientSearch.lastName))},l.searchOrder=function(){l.orderSearch.number?(l.searchWord=l.orderSearch.number,o(l.orderSearch.number,"null")):l.orderSearch.lastName&&(l.searchWord=l.orderSearch.lastName,o("null",l.orderSearch.lastName))},l.remove=function(e){var t=n.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");t&&e.$remove()},l.findOne=function(){e.api.get({id:a.id},function(e){l.orderModel=e})},l.update=function(e){l.orderModel.tech={id:"1",firstName:"Walter",lastName:"White"},l.orderModel.$update(function(t){e.$setPristine(),e.$setUntouched(),l.errorInfo.msg=null,l.successInfo.msg="Orden editada con Ã©xito",l.successInfo.data=t},function(e){l.successInfo.msg=null,l.errorInfo.msg=e.data})}}var appConfiguration=function(){var e="main",t=["ngResource","ui.router","angular-jwt","angular-storage","ngMessages"],r=function(t,r){angular.module(t,r||[]),angular.module(e).requires.push(t)};return{appName:e,appDependencies:t,registerModule:r}}();angular.module(appConfiguration.appName,appConfiguration.appDependencies),appConfiguration.registerModule("client"),appConfiguration.registerModule("order"),appConfiguration.registerModule("user"),angular.module("client").config(["$stateProvider",function(e){e.state("clientPanel",{url:"/clients",templateUrl:"modules/client/views/client-panel.client.view.html"}).state("editClient",{url:"/clients/:id/edit",templateUrl:"modules/client/views/edit-client.client.view.html"}).state("clientDetail",{url:"/clients/:id",templateUrl:"modules/client/views/client-detail.client.view.html",data:{requiresLogin:!0}})}]),angular.module("client").controller("ClientCtrl",["Clients","$http","$window","$stateParams",ClientCtrl]),angular.module("client").factory("Clients",["$resource",function(e){var t=e("api/clients/:id",{id:"@_id"},{update:{method:"PUT"}}),r=e("api/clients/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:t,search:r}}]),angular.module("main").config(["$stateProvider","$locationProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider",function(e,t,r,n,a){r.otherwise("/"),n.tokenGetter=["jwtHelper","$http","store","$state","$rootScope",function(e,t,r,n,a){var i=r.get("jwt");try{return e.isTokenExpired(i)?t({url:"http://localhost:3000/api/users/refresh",skipAuthorization:!0,method:"POST",data:{token:i}}).then(function(e){var t=e.data.token;return r.set("jwt",t),t},function(e){return r.remove("jwt"),n.go("signin"),!1}):i}catch(o){return r.remove("jwt"),!1}}],a.interceptors.push("jwtInterceptor"),e.state("dashboard",{url:"/",templateUrl:"modules/main/views/dashboard.client.view.html"})}]),angular.module("main").controller("mainCtrl",["$location",mainCtrl]),angular.module("order").config(["$stateProvider",function(e){e.state("orderPanel",{url:"/orders",templateUrl:"modules/order/views/order-panel.client.view.html",data:{requiresLogin:!0}}).state("editorder",{url:"/orders/:id/edit",templateUrl:"modules/order/views/edit-order.client.view.html"}).state("orderDetail",{url:"/orders/:id",templateUrl:"modules/order/views/order-detail.client.view.html"})}]),angular.module("order").controller("OrderCtrl",["Orders","Clients","$http","$window","$stateParams",OrderCtrl]),angular.module("order").factory("Orders",["$resource",function(e){var t=e("api/orders/:id",{id:"@_id"},{update:{method:"PUT"}}),r=e("api/orders/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:t,search:r}}]),angular.module("user").config(["$stateProvider",function(e){e.state("signup",{url:"/signup",templateUrl:"modules/user/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/user/views/signin.client.view.html"}).state("secureview",{url:"/secureview",templateUrl:"modules/user/views/secureview.client.view.html",data:{requiresLogin:!0}})}]).run(["$rootScope","$window","store","jwtHelper",function(e,t,r,n){e.$on("$stateChangeStart",function(e,n){n.data&&n.data.requiresLogin&&(r.get("jwt")||(t.location.href="/signin"))})}]),angular.module("user").controller("UserController",["$window","Users","$http","store","jwtHelper",function(e,t,r,n,a){this.user={},this.signup=function(){r({url:"http://localhost:3000/api/users/signup",method:"POST",data:this.user}).then(function(t){n.set("jwt",t.data.token),e.location.href="/panel"},function(e){console.log(e),this.errMessage=e.data.message})},this.signin=function(){r({url:"http://localhost:3000/api/users/signin",method:"POST",data:this.user}).then(function(t){var r=t.data.token;n.set("jwt",r),e.location.href="/panel"},function(e){this.errMessage=e.data.message})},this.isAuth=function(){var e=n.get("jwt");return e?(this.payload=a.decodeToken(e),!0):!1},this.logout=function(){var e=n.get("jwt"),r=a.decodeToken(e);t.logout.get({id:r._id},function(){n.remove("jwt")})}}]),angular.module("user").directive("compareTo",[function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,r,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}]),angular.module("user").directive("recordAvailabilityValidator",["$http","Users",function(e,t){return{require:"ngModel",link:function(e,r,n,a){function i(e){a.$setValidity("recordLoading",!e)}function o(e){a.$setValidity("recordAvailable",e)}a.$parsers.push(function(e){if(e&&0!==e.length){i(!0),o(!1);var r=t.search.get({name:e},function(){null===r.data&&(i(!1),o(!0))});return e}})}}}]),angular.module("user").factory("Users",["$resource",function(e){var t=e("api/users/logout/:id",{id:"@_id"}),r=e("api/users/search/:name",{name:"@name"});return{logout:t,search:r}}]);
//# sourceMappingURL=data:application/json;base64,
