function ClientCtrl(e,t,r,n){function i(t,r){e.search.query({id:null,number:t,lastName:r},function(e){o.clientList=e})}var a,o=this;o.clientModel={},o.clientSearch={},o.errorInfo={msg:null,data:null},o.successInfo={msg:null,data:null},o.create=function(t){var r=new e.api(o.clientModel);r.$save(function(e){angular.copy(a,o.clientModel),t.$setPristine(),t.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente creado con exito",o.successInfo.data=e},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})},o.search=function(){o.clientSearch.number?(o.searchWord=o.clientSearch.number,i(o.clientSearch.number,"null")):o.clientSearch.lastName&&(o.searchWord=o.clientSearch.lastName,i("null",o.clientSearch.lastName))},o.remove=function(e){var t=r.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");t&&e.$remove()},o.findOne=function(){e.api.get({id:n.id},function(e){o.clientModel=e})},o.update=function(e){o.clientModel.$update(function(t){e.$setPristine(),e.$setUntouched(),o.errorInfo.msg=null,o.successInfo.msg="Cliente editado con exito",o.successInfo.data=t},function(e){o.successInfo.msg=null,o.errorInfo.msg=e.data})}}function mainCtrl(e){var t=this,r=e.path();t.isHome="/"==r}function OrderCtrl(e,t,r,n,i,a){function o(e,r){t.search.query({id:null,number:e,lastName:r},function(e){s.clientList=e})}function l(t,r){e.search.query({id:null,number:t,lastName:r},function(e){s.orderList=e})}var s=this;s.orderModel={},s.orderSearch={},s.errorInfo={msg:null,data:null},s.successInfo={msg:null,data:null},s.solvedOpt=["No","Si"],s.orderStatus=["Cancelada","Asignada","Completada"],s.selectedTech="",s.create=function(t){s.orderModel.client=s.clientData._id,s.orderModel.tech={id:s.selectedTech._id,firstName:s.selectedTech.firstName,lastName:s.selectedTech.lastName};var r=new e.api(s.orderModel);r.$save(function(e){s.orderModel={},s.clientData=null,s.clientSearch={},s.clientList=null,t.$setPristine(),t.$setUntouched(),s.errorInfo.msg=null,s.successInfo.msg="Orden creada con exito",s.successInfo.data=e},function(e){s.successInfo.msg=null,s.errorInfo.msg=e.data})},s.searchClient=function(){s.clientSearch.number?(s.searchWord=s.clientSearch.number,o(s.clientSearch.number,"null")):s.clientSearch.lastName&&(s.searchWord=s.clientSearch.lastName,o("null",s.clientSearch.lastName))},s.searchOrder=function(){s.orderSearch.number?(s.searchWord=s.orderSearch.number,l(s.orderSearch.number,"null")):s.orderSearch.lastName&&(s.searchWord=s.orderSearch.lastName,l("null",s.orderSearch.lastName))},s.remove=function(e){var t=i.confirm("Quieres eliminar a "+e.firstName+" "+e.lastName+" ?");t&&e.$remove()},s.findOne=function(t){e.api.get({id:a.id},function(e){s.orderModel=e,t&&(s.selectedTech=s.users.filter(function(e){return e._id===s.orderModel.tech.id}),s.selectedTech=s.selectedTech[0])})},s.update=function(e){s.orderModel.tech={id:s.selectedTech._id,firstName:s.selectedTech.firstName,lastName:s.selectedTech.lastName},s.orderModel.$update(function(t){e.$setPristine(),e.$setUntouched(),s.errorInfo.msg=null,s.successInfo.msg="Orden editada con Ã©xito",s.successInfo.data=t},function(e){s.successInfo.msg=null,s.errorInfo.msg=e.data})},s.getAllUsers=function(){r.api.query(function(e){s.users=e.filter(function(e){return"Tech"===e.role})})}}var appConfiguration=function(){var e="main",t=["ngResource","ui.router","angular-jwt","angular-storage","ngMessages"],r=function(t,r){angular.module(t,r||[]),angular.module(e).requires.push(t)};return{appName:e,appDependencies:t,registerModule:r}}();angular.module(appConfiguration.appName,appConfiguration.appDependencies),appConfiguration.registerModule("client"),appConfiguration.registerModule("order"),appConfiguration.registerModule("user"),angular.module("client").config(["$stateProvider",function(e){e.state("clientPanel",{url:"/clients",templateUrl:"modules/client/views/client-panel.client.view.html"}).state("editClient",{url:"/clients/:id/edit",templateUrl:"modules/client/views/edit-client.client.view.html"}).state("clientDetail",{url:"/clients/:id",templateUrl:"modules/client/views/client-detail.client.view.html",data:{requiresLogin:!0}})}]),angular.module("client").controller("ClientCtrl",["Clients","$http","$window","$stateParams",ClientCtrl]),angular.module("client").factory("Clients",["$resource",function(e){var t=e("api/clients/:id",{id:"@_id"},{update:{method:"PUT"}}),r=e("api/clients/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:t,search:r}}]),angular.module("main").config(["$stateProvider","$locationProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider",function(e,t,r,n,i){r.otherwise("/"),n.tokenGetter=["jwtHelper","$http","store","$state","$rootScope",function(e,t,r,n,i){var a=r.get("jwt");try{return e.isTokenExpired(a)?t({url:"http://localhost:3000/api/users/refresh",skipAuthorization:!0,method:"POST",data:{token:a}}).then(function(e){var t=e.data.token;return r.set("jwt",t),t},function(e){return r.remove("jwt"),n.go("signin"),!1}):a}catch(o){return r.remove("jwt"),!1}}],i.interceptors.push("jwtInterceptor"),e.state("dashboard",{url:"/",templateUrl:"modules/main/views/dashboard.client.view.html"})}]),angular.module("main").controller("mainCtrl",["$location",mainCtrl]),angular.module("main").directive("ngEnter",function(){return function(e,t,r){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(r.ngEnter,{event:t})}),t.preventDefault())})}}),angular.module("order").config(["$stateProvider",function(e){e.state("orderPanel",{url:"/orders",templateUrl:"modules/order/views/order-panel.client.view.html",data:{requiresLogin:!1}}).state("editorder",{url:"/orders/:id/edit",templateUrl:"modules/order/views/edit-order.client.view.html"}).state("orderDetail",{url:"/orders/:id",templateUrl:"modules/order/views/order-detail.client.view.html"})}]),angular.module("order").controller("OrderCtrl",["Orders","Clients","Users","$http","$window","$stateParams",OrderCtrl]),angular.module("order").directive("ngEnter",function(){return function(e,t,r){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(r.ngEnter,{event:t})}),t.preventDefault())})}}),angular.module("order").factory("Orders",["$resource",function(e){var t=e("api/orders/:id",{id:"@_id"},{update:{method:"PUT"}}),r=e("api/orders/:id/search/:number/:lastName",{id:"@_id",number:"number",lastName:"lastName"});return{api:t,search:r}}]),angular.module("user").config(["$stateProvider",function(e){e.state("signup",{url:"/signup",templateUrl:"modules/user/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/user/views/signin.client.view.html"}).state("secureview",{url:"/secureview",templateUrl:"modules/user/views/secureview.client.view.html",data:{requiresLogin:!0}})}]).run(["$rootScope","$window","store","jwtHelper",function(e,t,r,n){e.$on("$stateChangeStart",function(e,n){n.data&&n.data.requiresLogin&&(r.get("jwt")||(t.location.href="/signin"))})}]),angular.module("user").controller("UserController",["$window","Users","$http","store","jwtHelper","$stateParams",function(e,t,r,n,i,a){this.user={},this.signup=function(){var r=new t.api(this.user);r.$save(function(t){console.log(t),n.set("jwt",t.token),e.location.href="/panel"},function(e){console.log(e)})},this.signin=function(){r({url:"http://localhost:3000/api/users/signin",method:"POST",data:this.user}).then(function(t){var r=t.data.token;n.set("jwt",r),e.location.href="/panel"},function(e){this.errMessage=e.data.message})},this.getAll=function(){t.api.query(function(e){this.users=e.filter(function(e){return"Tech"===e.role})})},this.getOne=function(){t.api.get({id:a.id},function(e){this.user=e})},this.isAuth=function(){var e=n.get("jwt");return e?(this.payload=i.decodeToken(e),!0):!1},this.logout=function(){var e=n.get("jwt"),r=i.decodeToken(e);t.logout.get({id:r._id},function(){n.remove("jwt")})}}]),angular.module("user").directive("compareTo",[function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,r,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("otherModelValue",function(){n.$validate()})}}}]),angular.module("user").directive("recordAvailabilityValidator",["$http","Users",function(e,t){return{require:"ngModel",link:function(e,r,n,i){function a(e){i.$setValidity("recordLoading",!e)}function o(e){i.$setValidity("recordAvailable",e)}i.$parsers.push(function(e){if(e&&0!==e.length){a(!0),o(!1);var r=t.search.get({name:e},function(){null===r.data&&(a(!1),o(!0))});return e}})}}}]),angular.module("user").factory("Users",["$resource",function(e){var t=e("api/users/signup/:id",{id:"@_id"}),r=e("api/users/logout/:id",{id:"@_id"}),n=e("api/users/search/:name",{name:"@name"});return{api:t,logout:r,search:n}}]);
//# sourceMappingURL=data:application/json;base64,
