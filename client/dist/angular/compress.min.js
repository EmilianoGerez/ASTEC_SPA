function ClientCtrl(e){var t,n=this,r={},i={msg:null,data:null},a={msg:null,data:null},o=function(){var n=new e.api(r);n.$save(function(e){angular.copy(t,r),a.msg="Cliente creado con exito",a.data=e},function(e){i.msg=e.data})};n.fns={clientModel:r,errorInfo:i,successInfo:a,create:o}}var appConfiguration=function(){var e="main",t=["ngResource","ui.router","angular-jwt","angular-storage","ngMessages"],n=function(t,n){angular.module(t,n||[]),angular.module(e).requires.push(t)};return{appName:e,appDependencies:t,registerModule:n}}();angular.module(appConfiguration.appName,appConfiguration.appDependencies),appConfiguration.registerModule("client"),appConfiguration.registerModule("user"),angular.module("client").config(["$stateProvider",function(e){e.state("clientPanel",{url:"/clients",templateUrl:"modules/client/views/client-panel.client.view.html"}).state("editClient",{url:"/clients/:id/edit",templateUrl:"modules/client/views/edit-client.client.view.html"}).state("clientDetail",{url:"/clients/:id",templateUrl:"modules/client/views/client-detail.client.view.html",data:{requiresLogin:!0}})}]),angular.module("client").controller("ClientCtrl",["Clients",ClientCtrl]),angular.module("client").factory("Clients",["$resource",function(e){var t=e("api/clients/:id",{id:"@_id"});return{api:t}}]),angular.module("main").config(["$stateProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider",function(e,t,n,r){t.otherwise("/"),n.tokenGetter=["jwtHelper","$http","store","$state","$rootScope",function(e,t,n,r,i){var a=n.get("jwt");try{return e.isTokenExpired(a)?t({url:"http://localhost:3000/api/users/refresh",skipAuthorization:!0,method:"POST",data:{token:a}}).then(function(e){var t=e.data.token;return n.set("jwt",t),t},function(e){return n.remove("jwt"),r.go("signin"),!1}):a}catch(o){return n.remove("jwt"),!1}}],r.interceptors.push("jwtInterceptor"),e.state("home",{url:"/",templateUrl:"modules/main/views/home.client.view.html"})}]),angular.module("user").config(["$stateProvider",function(e){e.state("signup",{url:"/signup",templateUrl:"modules/user/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/user/views/signin.client.view.html"}).state("secureview",{url:"/secureview",templateUrl:"modules/user/views/secureview.client.view.html",data:{requiresLogin:!0}})}]).run(["$rootScope","$location","store","jwtHelper",function(e,t,n,r){e.$on("$stateChangeStart",function(e,r){return r.data&&r.data.requiresLogin&&!n.get("jwt")?t.path("signin"):void 0})}]),angular.module("user").controller("UserController",["$scope","$location","Users","$http","store","jwtHelper",function(e,t,n,r,i,a){e.user={name:"",password:"",confirmPassword:""},e.signup=function(){r({url:"http://localhost:3000/api/users/signup",method:"POST",data:e.user}).then(function(e){i.set("jwt",e.data.token),t.path("/")},function(t){e.errMessage=t.data.message})},e.signin=function(){r({url:"http://localhost:3000/api/users/signin",method:"POST",data:e.user}).then(function(e){var n=e.data.token;i.set("jwt",n),t.path("/")},function(t){e.errMessage=t.data.message})},e.isAuth=function(){var t=i.get("jwt");return t?(e.payload=a.decodeToken(t),!0):!1},e.logout=function(){var e=i.get("jwt"),t=a.decodeToken(e);n.logout.get({id:t._id},function(){i.remove("jwt")})}}]),angular.module("user").directive("compareTo",[function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,n,r){r.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("otherModelValue",function(){r.$validate()})}}}]),angular.module("user").directive("recordAvailabilityValidator",["$http","Users",function(e,t){return{require:"ngModel",link:function(e,n,r,i){function a(e){i.$setValidity("recordLoading",!e)}function o(e){i.$setValidity("recordAvailable",e)}i.$parsers.push(function(e){if(e&&0!==e.length){a(!0),o(!1);var n=t.search.get({name:e},function(){null===n.data&&(a(!1),o(!0))});return e}})}}}]),angular.module("user").factory("Users",["$resource",function(e){var t=e("api/users/logout/:id",{id:"@_id"}),n=e("api/users/search/:name",{name:"@name"});return{logout:t,search:n}}]);
//# sourceMappingURL=data:application/json;base64,
